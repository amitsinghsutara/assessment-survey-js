/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={};function t(){const e=window.location.search;return new URLSearchParams(e)}e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();var n={};const i=document.getElementById("landWrap"),a=document.getElementById("gameWrap"),r=document.getElementById("endWrap"),s=(document.getElementById("starWrapper"),document.getElementById("qWrap")),o=document.getElementById("pbutton"),c=document.getElementById("feedbackWrap"),l=document.getElementById("aWrap"),u=document.getElementById("answerButton1"),d=document.getElementById("answerButton2"),h=document.getElementById("answerButton3"),f=document.getElementById("answerButton4"),p=document.getElementById("answerButton5"),m=document.getElementById("answerButton6");var g,w=null;const y=[u,d,h,f,p,m];var b,v,I=!0;function E(e){console.log("ready for next!"),l.style.display="none",w=e,o.innerHTML="<button id='nextqButton'><svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M9 18L15 12L9 6V18Z' fill='currentColor' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'></path></svg></button>",document.getElementById("nextqButton").addEventListener("click",(function(){!function(e){l.style.display="grid";let t="";var i;for(var a in void 0===e&&(e=w),"promptImg"in e&&(t+="<img src='"+e.promptImg+"'></img><BR>"),t+=e.promptText,"promptAudio"in e&&(i=e.promptAudio,console.log("trying to play "+i),console.log(n[i].src),n[i].play()),o.innerHTML="",s.innerHTML=t,y)y[a].style.display="none";for(var r in e.answers.length>=1&&(u.style.display="block"),e.answers.length>=2&&(d.style.display="block"),e.answers.length>=3&&(h.style.display="block"),e.answers.length>=4&&(f.style.display="block"),e.answers.length>=5&&(p.style.display="block"),e.answers.length>=6&&(m.style.display="block"),e.answers){let t=e.answers[r],n="";"answerText"in t&&(n+=t.answerText),"answerImg"in t&&(n+="<img src='"+t.answerImg+"'></img>"),y[r].innerHTML=n}g=Date.now()}(e)}))}function S(e){e?(c.classList.remove("hidden"),c.classList.add("visible"),I=!1):(c.classList.remove("visible"),c.classList.add("hidden"),I=!0)}function k(e){b=e}function C(e){if(I){var t=Date.now()-g;console.log("answered in "+t),b(e,t)}}u.addEventListener("click",(function(){C(1)})),d.addEventListener("click",(function(){C(2)})),h.addEventListener("click",(function(){C(3)})),f.addEventListener("click",(function(){C(4)})),p.addEventListener("click",(function(){C(5)})),m.addEventListener("click",(function(){C(6)})),i.addEventListener("click",(function(){i.style.display="none",a.style.display="block",r.style.display="none",Date.now(),v()}));const D=function(e){const t=[];let n=0;for(let i=0;i<e.length;i++){let a=e.charCodeAt(i);a<128?t[n++]=a:a<2048?(t[n++]=a>>6|192,t[n++]=63&a|128):55296==(64512&a)&&i+1<e.length&&56320==(64512&e.charCodeAt(i+1))?(a=65536+((1023&a)<<10)+(1023&e.charCodeAt(++i)),t[n++]=a>>18|240,t[n++]=a>>12&63|128,t[n++]=a>>6&63|128,t[n++]=63&a|128):(t[n++]=a>>12|224,t[n++]=a>>6&63|128,t[n++]=63&a|128)}return t},_={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[];for(let t=0;t<e.length;t+=3){const a=e[t],r=t+1<e.length,s=r?e[t+1]:0,o=t+2<e.length,c=o?e[t+2]:0,l=a>>2,u=(3&a)<<4|s>>4;let d=(15&s)<<2|c>>6,h=63&c;o||(h=64,r||(d=64)),i.push(n[l],n[u],n[d],n[h])}return i.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(D(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,i=0;for(;n<e.length;){const a=e[n++];if(a<128)t[i++]=String.fromCharCode(a);else if(a>191&&a<224){const r=e[n++];t[i++]=String.fromCharCode((31&a)<<6|63&r)}else if(a>239&&a<365){const r=((7&a)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[i++]=String.fromCharCode(55296+(r>>10)),t[i++]=String.fromCharCode(56320+(1023&r))}else{const r=e[n++],s=e[n++];t[i++]=String.fromCharCode((15&a)<<12|(63&r)<<6|63&s)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,i=[];for(let t=0;t<e.length;){const a=n[e.charAt(t++)],r=t<e.length?n[e.charAt(t)]:0;++t;const s=t<e.length?n[e.charAt(t)]:64;++t;const o=t<e.length?n[e.charAt(t)]:64;if(++t,null==a||null==r||null==s||null==o)throw Error();const c=a<<2|r>>4;if(i.push(c),64!==s){const e=r<<4&240|s>>2;if(i.push(e),64!==o){const e=s<<6&192|o;i.push(e)}}}return i},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},B=function(e){return function(e){const t=D(e);return _.encodeByteArray(t,!0)}(e).replace(/\./g,"")};function T(){return"object"==typeof indexedDB}function A(){return new Promise(((e,t)=>{try{let n=!0;const i="validate-browser-context-for-indexeddb-analytics-module",a=self.indexedDB.open(i);a.onsuccess=()=>{a.result.close(),n||self.indexedDB.deleteDatabase(i),e(!0)},a.onupgradeneeded=()=>{n=!1},a.onerror=()=>{var e;t((null===(e=a.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}const L=()=>{try{return function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e.g)return e.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&function(e){try{return _.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null}(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}};class N{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}class M extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,M.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,O.prototype.create)}}class O{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},i=`${this.service}/${e}`,a=this.errors[e],r=a?function(e,t){return e.replace(x,((e,n)=>{const i=t[n];return null!=i?String(i):`<${n}?>`}))}(a,n):"Error",s=`${this.serviceName}: ${r} (${i}).`;return new M(i,s,n)}}const x=/\{\$([^}]+)}/g;function P(e,t){if(e===t)return!0;const n=Object.keys(e),i=Object.keys(t);for(const a of n){if(!i.includes(a))return!1;const n=e[a],r=t[a];if(j(n)&&j(r)){if(!P(n,r))return!1}else if(n!==r)return!1}for(const e of i)if(!n.includes(e))return!1;return!0}function j(e){return null!==e&&"object"==typeof e}function $(e,t=1e3,n=2){const i=t*Math.pow(n,e),a=Math.round(.5*i*(Math.random()-.5)*2);return Math.min(144e5,i+a)}function F(e){return e&&e._delegate?e._delegate:e}class R{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const U="[DEFAULT]";class H{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new N;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),i=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(i)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(i)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:U})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e="[DEFAULT]"){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e="[DEFAULT]"){return this.instances.has(e)}getOptions(e="[DEFAULT]"){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const i=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(i);return i}onInit(e,t){var n;const i=this.normalizeInstanceIdentifier(t),a=null!==(n=this.onInitCallbacks.get(i))&&void 0!==n?n:new Set;a.add(e),this.onInitCallbacks.set(i,a);const r=this.instances.get(i);return r&&e(r,i),()=>{a.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const i of n)try{i(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(i=e,i===U?void 0:i),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var i;return n||null}normalizeInstanceIdentifier(e="[DEFAULT]"){return this.component?this.component.multipleInstances?e:U:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class q{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new H(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}const z=[];var W;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(W||(W={}));const V={debug:W.DEBUG,verbose:W.VERBOSE,info:W.INFO,warn:W.WARN,error:W.ERROR,silent:W.SILENT},Q=W.INFO,K={[W.DEBUG]:"log",[W.VERBOSE]:"log",[W.INFO]:"info",[W.WARN]:"warn",[W.ERROR]:"error"},G=(e,t,...n)=>{if(t<e.logLevel)return;const i=(new Date).toISOString(),a=K[t];if(!a)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[a](`[${i}]  ${e.name}:`,...n)};class J{constructor(e){this.name=e,this._logLevel=Q,this._logHandler=G,this._userLogHandler=null,z.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in W))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?V[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,W.DEBUG,...e),this._logHandler(this,W.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,W.VERBOSE,...e),this._logHandler(this,W.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,W.INFO,...e),this._logHandler(this,W.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,W.WARN,...e),this._logHandler(this,W.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,W.ERROR,...e),this._logHandler(this,W.ERROR,...e)}}let Y,Z;const X=new WeakMap,ee=new WeakMap,te=new WeakMap,ne=new WeakMap,ie=new WeakMap;let ae={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return ee.get(e);if("objectStoreNames"===t)return e.objectStoreNames||te.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return se(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function re(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(Z||(Z=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(oe(this),e),se(X.get(this))}:function(...e){return se(t.apply(oe(this),e))}:function(e,...n){const i=t.call(oe(this),e,...n);return te.set(i,e.sort?e.sort():[e]),se(i)}:(e instanceof IDBTransaction&&function(e){if(ee.has(e))return;const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",r),e.removeEventListener("abort",r)},a=()=>{t(),i()},r=()=>{n(e.error||new DOMException("AbortError","AbortError")),i()};e.addEventListener("complete",a),e.addEventListener("error",r),e.addEventListener("abort",r)}));ee.set(e,t)}(e),n=e,(Y||(Y=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(e,ae):e);var t,n}function se(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("success",a),e.removeEventListener("error",r)},a=()=>{t(se(e.result)),i()},r=()=>{n(e.error),i()};e.addEventListener("success",a),e.addEventListener("error",r)}));return t.then((t=>{t instanceof IDBCursor&&X.set(t,e)})).catch((()=>{})),ie.set(t,e),t}(e);if(ne.has(e))return ne.get(e);const t=re(e);return t!==e&&(ne.set(e,t),ie.set(t,e)),t}const oe=e=>ie.get(e);function ce(e,t,{blocked:n,upgrade:i,blocking:a,terminated:r}={}){const s=indexedDB.open(e,t),o=se(s);return i&&s.addEventListener("upgradeneeded",(e=>{i(se(s.result),e.oldVersion,e.newVersion,se(s.transaction))})),n&&s.addEventListener("blocked",(()=>n())),o.then((e=>{r&&e.addEventListener("close",(()=>r())),a&&e.addEventListener("versionchange",(()=>a()))})).catch((()=>{})),o}const le=["get","getKey","getAll","getAllKeys","count"],ue=["put","add","delete","clear"],de=new Map;function he(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(de.get(t))return de.get(t);const n=t.replace(/FromIndex$/,""),i=t!==n,a=ue.includes(n);if(!(n in(i?IDBIndex:IDBObjectStore).prototype)||!a&&!le.includes(n))return;const r=async function(e,...t){const r=this.transaction(e,a?"readwrite":"readonly");let s=r.store;return i&&(s=s.index(t.shift())),(await Promise.all([s[n](...t),a&&r.done]))[0]};return de.set(t,r),r}var fe;fe=ae,ae={...fe,get:(e,t,n)=>he(e,t)||fe.get(e,t,n),has:(e,t)=>!!he(e,t)||fe.has(e,t)};class pe{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const me="@firebase/app",ge="0.8.2",we=new J("@firebase/app"),ye="[DEFAULT]",be={[me]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},ve=new Map,Ie=new Map;function Ee(e,t){try{e.container.addComponent(t)}catch(n){we.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function Se(e){const t=e.name;if(Ie.has(t))return we.debug(`There were multiple attempts to register component ${t}.`),!1;Ie.set(t,e);for(const t of ve.values())Ee(t,e);return!0}function ke(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}const Ce=new O("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."});class De{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new R("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw Ce.create("app-deleted",{appName:this._name})}}function _e(e,t={}){let n=e;"object"!=typeof t&&(t={name:t});const i=Object.assign({name:ye,automaticDataCollectionEnabled:!1},t),a=i.name;if("string"!=typeof a||!a)throw Ce.create("bad-app-name",{appName:String(a)});var r;if(n||(n=null===(r=L())||void 0===r?void 0:r.config),!n)throw Ce.create("no-options");const s=ve.get(a);if(s){if(P(n,s.options)&&P(i,s.config))return s;throw Ce.create("duplicate-app",{appName:a})}const o=new q(a);for(const e of Ie.values())o.addComponent(e);const c=new De(n,i,o);return ve.set(a,c),c}function Be(e,t,n){var i;let a=null!==(i=be[e])&&void 0!==i?i:e;n&&(a+=`-${n}`);const r=a.match(/\s|\//),s=t.match(/\s|\//);if(r||s){const e=[`Unable to register library "${a}" with version "${t}":`];return r&&e.push(`library name "${a}" contains illegal characters (whitespace or "/")`),r&&s&&e.push("and"),s&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void we.warn(e.join(" "))}Se(new R(`${a}-version`,(()=>({library:a,version:t})),"VERSION"))}const Te="firebase-heartbeat-store";let Ae=null;function Le(){return Ae||(Ae=ce("firebase-heartbeat-database",1,{upgrade:(e,t)=>{0===t&&e.createObjectStore(Te)}}).catch((e=>{throw Ce.create("idb-open",{originalErrorMessage:e.message})}))),Ae}async function Ne(e,t){var n;try{const n=(await Le()).transaction(Te,"readwrite"),i=n.objectStore(Te);return await i.put(t,Me(e)),n.done}catch(e){if(e instanceof M)we.warn(e.message);else{const t=Ce.create("idb-set",{originalErrorMessage:null===(n=e)||void 0===n?void 0:n.message});we.warn(t.message)}}}function Me(e){return`${e.name}!${e.options.appId}`}class Oe{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new Pe(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=xe();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=xe(),{heartbeatsToSend:t,unsentEntries:n}=function(e,t=1024){const n=[];let i=e.slice();for(const a of e){const e=n.find((e=>e.agent===a.agent));if(e){if(e.dates.push(a.date),je(n)>t){e.dates.pop();break}}else if(n.push({agent:a.agent,dates:[a.date]}),je(n)>t){n.pop();break}i=i.slice(1)}return{heartbeatsToSend:n,unsentEntries:i}}(this._heartbeatsCache.heartbeats),i=B(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,n.length>0?(this._heartbeatsCache.heartbeats=n,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),i}}function xe(){return(new Date).toISOString().substring(0,10)}class Pe{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!T()&&A().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(e){var t;try{return(await Le()).transaction(Te).objectStore(Te).get(Me(e))}catch(e){if(e instanceof M)we.warn(e.message);else{const n=Ce.create("idb-get",{originalErrorMessage:null===(t=e)||void 0===t?void 0:t.message});we.warn(n.message)}}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return Ne(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return Ne(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function je(e){return B(JSON.stringify({version:2,heartbeats:e})).length}Se(new R("platform-logger",(e=>new pe(e)),"PRIVATE")),Se(new R("heartbeat",(e=>new Oe(e)),"PRIVATE")),Be(me,ge,""),Be(me,ge,"esm2017"),Be("fire-js","");const $e="@firebase/installations",Fe="0.5.15",Re="w:0.5.15",Ue=new O("installations","Installations",{"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."});function He(e){return e instanceof M&&e.code.includes("request-failed")}function qe({projectId:e}){return`https://firebaseinstallations.googleapis.com/v1/projects/${e}/installations`}function ze(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}async function We(e,t){const n=(await t.json()).error;return Ue.create("request-failed",{requestName:e,serverCode:n.code,serverMessage:n.message,serverStatus:n.status})}function Ve({apiKey:e}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}async function Qe(e){const t=await e();return t.status>=500&&t.status<600?e():t}function Ke(e){return new Promise((t=>{setTimeout(t,e)}))}const Ge=/^[cdef][\w-]{21}$/;function Je(){try{const e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;const t=function(e){return(t=e,btoa(String.fromCharCode(...t)).replace(/\+/g,"-").replace(/\//g,"_")).substr(0,22);var t}(e);return Ge.test(t)?t:""}catch(e){return""}}function Ye(e){return`${e.appName}!${e.appId}`}const Ze=new Map;function Xe(e,t){const n=Ye(e);et(n,t),function(e,t){const n=(!tt&&"BroadcastChannel"in self&&(tt=new BroadcastChannel("[Firebase] FID Change"),tt.onmessage=e=>{et(e.data.key,e.data.fid)}),tt);n&&n.postMessage({key:e,fid:t}),0===Ze.size&&tt&&(tt.close(),tt=null)}(n,t)}function et(e,t){const n=Ze.get(e);if(n)for(const e of n)e(t)}let tt=null;const nt="firebase-installations-store";let it=null;function at(){return it||(it=ce("firebase-installations-database",1,{upgrade:(e,t)=>{0===t&&e.createObjectStore(nt)}})),it}async function rt(e,t){const n=Ye(e),i=(await at()).transaction(nt,"readwrite"),a=i.objectStore(nt),r=await a.get(n);return await a.put(t,n),await i.done,r&&r.fid===t.fid||Xe(e,t.fid),t}async function st(e){const t=Ye(e),n=(await at()).transaction(nt,"readwrite");await n.objectStore(nt).delete(t),await n.done}async function ot(e,t){const n=Ye(e),i=(await at()).transaction(nt,"readwrite"),a=i.objectStore(nt),r=await a.get(n),s=t(r);return void 0===s?await a.delete(n):await a.put(s,n),await i.done,!s||r&&r.fid===s.fid||Xe(e,s.fid),s}async function ct(e){let t;const n=await ot(e.appConfig,(n=>{const i=function(e){return dt(e||{fid:Je(),registrationStatus:0})}(n),a=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine)return{installationEntry:t,registrationPromise:Promise.reject(Ue.create("app-offline"))};const n={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},i=async function(e,t){try{const n=await async function({appConfig:e,heartbeatServiceProvider:t},{fid:n}){const i=qe(e),a=Ve(e),r=t.getImmediate({optional:!0});if(r){const e=await r.getHeartbeatsHeader();e&&a.append("x-firebase-client",e)}const s={fid:n,authVersion:"FIS_v2",appId:e.appId,sdkVersion:Re},o={method:"POST",headers:a,body:JSON.stringify(s)},c=await Qe((()=>fetch(i,o)));if(c.ok){const e=await c.json();return{fid:e.fid||n,registrationStatus:2,refreshToken:e.refreshToken,authToken:ze(e.authToken)}}throw await We("Create Installation",c)}(e,t);return rt(e.appConfig,n)}catch(n){throw He(n)&&409===n.customData.serverCode?await st(e.appConfig):await rt(e.appConfig,{fid:t.fid,registrationStatus:0}),n}}(e,n);return{installationEntry:n,registrationPromise:i}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:lt(e)}:{installationEntry:t}}(e,i);return t=a.registrationPromise,a.installationEntry}));return""===n.fid?{installationEntry:await t}:{installationEntry:n,registrationPromise:t}}async function lt(e){let t=await ut(e.appConfig);for(;1===t.registrationStatus;)await Ke(100),t=await ut(e.appConfig);if(0===t.registrationStatus){const{installationEntry:t,registrationPromise:n}=await ct(e);return n||t}return t}function ut(e){return ot(e,(e=>{if(!e)throw Ue.create("installation-not-found");return dt(e)}))}function dt(e){return 1===(t=e).registrationStatus&&t.registrationTime+1e4<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}async function ht({appConfig:e,heartbeatServiceProvider:t},n){const i=function(e,{fid:t}){return`${qe(e)}/${t}/authTokens:generate`}(e,n),a=function(e,{refreshToken:t}){const n=Ve(e);return n.append("Authorization",function(e){return`FIS_v2 ${e}`}(t)),n}(e,n),r=t.getImmediate({optional:!0});if(r){const e=await r.getHeartbeatsHeader();e&&a.append("x-firebase-client",e)}const s={installation:{sdkVersion:Re,appId:e.appId}},o={method:"POST",headers:a,body:JSON.stringify(s)},c=await Qe((()=>fetch(i,o)));if(c.ok)return ze(await c.json());throw await We("Generate Auth Token",c)}async function ft(e,t=!1){let n;const i=await ot(e.appConfig,(i=>{if(!mt(i))throw Ue.create("not-registered");const a=i.authToken;if(!t&&(2===(r=a).requestStatus&&!function(e){const t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+36e5}(r)))return i;var r;if(1===a.requestStatus)return n=async function(e,t){let n=await pt(e.appConfig);for(;1===n.authToken.requestStatus;)await Ke(100),n=await pt(e.appConfig);const i=n.authToken;return 0===i.requestStatus?ft(e,t):i}(e,t),i;{if(!navigator.onLine)throw Ue.create("app-offline");const t=function(e){const t={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},e),{authToken:t})}(i);return n=async function(e,t){try{const n=await ht(e,t),i=Object.assign(Object.assign({},t),{authToken:n});return await rt(e.appConfig,i),n}catch(n){if(!He(n)||401!==n.customData.serverCode&&404!==n.customData.serverCode){const n=Object.assign(Object.assign({},t),{authToken:{requestStatus:0}});await rt(e.appConfig,n)}else await st(e.appConfig);throw n}}(e,t),t}}));return n?await n:i.authToken}function pt(e){return ot(e,(e=>{if(!mt(e))throw Ue.create("not-registered");return 1===(t=e.authToken).requestStatus&&t.requestTime+1e4<Date.now()?Object.assign(Object.assign({},e),{authToken:{requestStatus:0}}):e;var t}))}function mt(e){return void 0!==e&&2===e.registrationStatus}function gt(e){return Ue.create("missing-app-config-values",{valueName:e})}const wt="installations";Se(new R(wt,(e=>{const t=e.getProvider("app").getImmediate(),n=function(e){if(!e||!e.options)throw gt("App Configuration");if(!e.name)throw gt("App Name");const t=["projectId","apiKey","appId"];for(const n of t)if(!e.options[n])throw gt(n);return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t);return{app:t,appConfig:n,heartbeatServiceProvider:ke(t,"heartbeat"),_delete:()=>Promise.resolve()}}),"PUBLIC")),Se(new R("installations-internal",(e=>{const t=ke(e.getProvider("app").getImmediate(),wt).getImmediate();return{getId:()=>async function(e){const t=e,{installationEntry:n,registrationPromise:i}=await ct(t);return i?i.catch(console.error):ft(t).catch(console.error),n.fid}(t),getToken:e=>async function(e,t=!1){const n=e;return await async function(e){const{registrationPromise:t}=await ct(e);t&&await t}(n),(await ft(n,t)).token}(t,e)}}),"PRIVATE")),Be($e,Fe),Be($e,Fe,"esm2017");const yt="analytics",bt="https://www.googletagmanager.com/gtag/js",vt=new J("@firebase/analytics");function It(e){return Promise.all(e.map((e=>e.catch((e=>e)))))}const Et=new O("analytics","Analytics",{"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.'}),St=new class{constructor(e={},t=1e3){this.throttleMetadata=e,this.intervalMillis=t}getThrottleMetadata(e){return this.throttleMetadata[e]}setThrottleMetadata(e,t){this.throttleMetadata[e]=t}deleteThrottleMetadata(e){delete this.throttleMetadata[e]}};function kt(e){return new Headers({Accept:"application/json","x-goog-api-key":e})}async function Ct(e,t=St,n){const{appId:i,apiKey:a,measurementId:r}=e.options;if(!i)throw Et.create("no-app-id");if(!a){if(r)return{measurementId:r,appId:i};throw Et.create("no-api-key")}const s=t.getThrottleMetadata(i)||{backoffCount:0,throttleEndTimeMillis:Date.now()},o=new _t;return setTimeout((async()=>{o.abort()}),void 0!==n?n:6e4),Dt({appId:i,apiKey:a,measurementId:r},s,o,t)}async function Dt(e,{throttleEndTimeMillis:t,backoffCount:n},i,a=St){var r,s;const{appId:o,measurementId:c}=e;try{await function(e,t){return new Promise(((n,i)=>{const a=Math.max(t-Date.now(),0),r=setTimeout(n,a);e.addEventListener((()=>{clearTimeout(r),i(Et.create("fetch-throttle",{throttleEndTimeMillis:t}))}))}))}(i,t)}catch(e){if(c)return vt.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null===(r=e)||void 0===r?void 0:r.message}]`),{appId:o,measurementId:c};throw e}try{const t=await async function(e){var t;const{appId:n,apiKey:i}=e,a={method:"GET",headers:kt(i)},r="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig".replace("{app-id}",n),s=await fetch(r,a);if(200!==s.status&&304!==s.status){let e="";try{const n=await s.json();(null===(t=n.error)||void 0===t?void 0:t.message)&&(e=n.error.message)}catch(e){}throw Et.create("config-fetch-failed",{httpStatus:s.status,responseMessage:e})}return s.json()}(e);return a.deleteThrottleMetadata(o),t}catch(t){const r=t;if(!function(e){if(!(e instanceof M&&e.customData))return!1;const t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(r)){if(a.deleteThrottleMetadata(o),c)return vt.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null==r?void 0:r.message}]`),{appId:o,measurementId:c};throw t}const l=503===Number(null===(s=null==r?void 0:r.customData)||void 0===s?void 0:s.httpStatus)?$(n,a.intervalMillis,30):$(n,a.intervalMillis),u={throttleEndTimeMillis:Date.now()+l,backoffCount:n+1};return a.setThrottleMetadata(o,u),vt.debug(`Calling attemptFetch again in ${l} millis`),Dt(e,u,i,a)}}class _t{constructor(){this.listeners=[]}addEventListener(e){this.listeners.push(e)}abort(){this.listeners.forEach((e=>e()))}}let Bt,Tt;async function At(e,t,n,i,a,r,s){var o;const c=Ct(e);c.then((t=>{n[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&vt.warn(`The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((e=>vt.error(e))),t.push(c);const l=async function(){var e;if(!T())return vt.warn(Et.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await A()}catch(t){return vt.warn(Et.create("indexeddb-unavailable",{errorInfo:null===(e=t)||void 0===e?void 0:e.toString()}).message),!1}return!0}().then((e=>e?i.getId():void 0)),[u,d]=await Promise.all([c,l]);(function(e){const t=window.document.getElementsByTagName("script");for(const n of Object.values(t))if(n.src&&n.src.includes(bt)&&n.src.includes(e))return n;return null})(r)||function(e,t){const n=document.createElement("script");n.src=`${bt}?l=${e}&id=${t}`,n.async=!0,document.head.appendChild(n)}(r,u.measurementId),Tt&&(a("consent","default",Tt),Tt=void 0),a("js",new Date);const h=null!==(o=null==s?void 0:s.config)&&void 0!==o?o:{};return h.origin="firebase",h.update=!0,null!=d&&(h.firebase_id=d),a("config",u.measurementId,h),Bt&&(a("set",Bt),Bt=void 0),u.measurementId}class Lt{constructor(e){this.app=e}_delete(){return delete Nt[this.app.options.appId],Promise.resolve()}}let Nt={},Mt=[];const Ot={};let xt,Pt,jt="dataLayer",$t=!1;function Ft(e,t,n){!function(){const e=[];if(function(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}()&&e.push("This is a browser extension environment."),"undefined"!=typeof navigator&&navigator.cookieEnabled||e.push("Cookies are not available."),e.length>0){const t=e.map(((e,t)=>`(${t+1}) ${e}`)).join(" "),n=Et.create("invalid-analytics-context",{errorInfo:t});vt.warn(n.message)}}();const i=e.options.appId;if(!i)throw Et.create("no-app-id");if(!e.options.apiKey){if(!e.options.measurementId)throw Et.create("no-api-key");vt.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=Nt[i])throw Et.create("already-exists",{id:i});if(!$t){!function(e){let t=[];Array.isArray(window.dataLayer)?t=window.dataLayer:window.dataLayer=t}();const{wrappedGtag:e,gtagCore:t}=function(e,t,n,i,a){let r=function(...e){window.dataLayer.push(arguments)};return window.gtag&&"function"==typeof window.gtag&&(r=window.gtag),window.gtag=function(e,t,n,i){return async function(a,r,s){try{"event"===a?await async function(e,t,n,i,a){try{let r=[];if(a&&a.send_to){let e=a.send_to;Array.isArray(e)||(e=[e]);const i=await It(n);for(const n of e){const e=i.find((e=>e.measurementId===n)),a=e&&t[e.appId];if(!a){r=[];break}r.push(a)}}0===r.length&&(r=Object.values(t)),await Promise.all(r),e("event",i,a||{})}catch(e){vt.error(e)}}(e,t,n,r,s):"config"===a?await async function(e,t,n,i,a,r){const s=i[a];try{if(s)await t[s];else{const e=(await It(n)).find((e=>e.measurementId===a));e&&await t[e.appId]}}catch(e){vt.error(e)}e("config",a,r)}(e,t,n,i,r,s):"consent"===a?e("consent","update",s):e("set",r)}catch(e){vt.error(e)}}}(r,e,t,n),{gtagCore:r,wrappedGtag:window.gtag}}(Nt,Mt,Ot);Pt=e,xt=t,$t=!0}return Nt[i]=At(e,Mt,Ot,t,xt,jt,n),new Lt(e)}function Rt(e,t,n,i){e=F(e),async function(e,t,n,i,a){if(a&&a.global)e("event",n,i);else{const a=await t;e("event",n,Object.assign(Object.assign({},i),{send_to:a}))}}(Pt,Nt[e.app.options.appId],t,n,i).catch((e=>vt.error(e)))}const Ut="@firebase/analytics",Ht="0.8.3";var qt,zt,Wt,Vt,Qt,Kt,Gt,Jt,Yt,Zt;function Xt(e,t,n){var i=e.answers[t-1],a="user "+qt+" ansered "+e.qName+" with "+i.answerName;a+=", all answers were [";var r="";for(var s in e.answers)a+=e.answers[s].answerName+",",r+=e.answers[s].answerName+",";a+="]",console.log(a),Rt(Qt,"answered",{type:"answered",clUserId:qt,userSource:zt,lat:Wt,lon:Vt,city:Gt,region:Jt,country:Yt,app:Zt,dt:n,question_name:e.qName,question:e.promptText,selected_answer:i.answerName,options:r})}Se(new R(yt,((e,{options:t})=>Ft(e.getProvider("app").getImmediate(),e.getProvider("installations-internal").getImmediate(),t)),"PUBLIC")),Se(new R("analytics-internal",(function(e){try{const t=e.getProvider(yt).getImmediate();return{logEvent:(e,n,i)=>Rt(t,e,n,i)}}catch(e){throw Et.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),Be(Ut,Ht),Be(Ut,Ht,"esm2017");class en{onEnd(){var e;e="user "+qt+" finished the assessment",console.log(e),Rt(Qt,"completed",{type:"completed",clUserId:qt,userSource:zt,lat:Wt,lon:Vt,city:Gt,region:Jt,country:Yt}),i.style.display="none",a.style.display="none",r.style.display="block",this.aLink.unity.sendClose()}}var tn=function(e,t,n,i){return new(n||(n=Promise))((function(a,r){function s(e){try{c(i.next(e))}catch(e){r(e)}}function o(e){try{c(i.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}c((i=i.apply(e,t||[])).next())}))};function nn(e){return tn(this,void 0,void 0,(function*(){var t="./data/"+e+".json";return console.log(t),fetch(t).then((e=>e.json()))}))}var an;class rn extends en{constructor(e){var t;super(),this.startSurvey=()=>{E(this.getNextQuestion())},this.onQuestionEnd=()=>{S(!1),this.qNum+=1,this.hasAnotherQueston()?E(this.getNextQuestion()):(console.log("no questions left"),this.onEnd())},this.tryAnswer=(e,t)=>{Xt(this.qList[this.qNum],e,t),S(!0),setTimeout((()=>{this.onQuestionEnd()}),2e3)},this.buildQuestionList=()=>function(e){return tn(this,void 0,void 0,(function*(){return nn(e).then((e=>e.questions))}))}(this.aLink.dataURL),this.dataURL=e,console.log("survey initialized"),this.qNum=0,k(this.tryAnswer),t=this.startSurvey,v=t}run(e){return t=this,i=void 0,r=function*(){this.aLink=e,this.buildQuestionList().then((e=>{this.qList=e,function(e,t){var i,a,r,s;i=this,a=void 0,s=function*(){var i;for(var a in e)if(null!=(i=e[a]).promptAudio){console.log("looking for "+i.promptAudio);var r=i.promptAudio,s=new Audio;s.src="audio/"+t+"/"+r,n[r]=s}console.log(n)},new((r=void 0)||(r=Promise))((function(e,t){function n(e){try{c(s.next(e))}catch(e){t(e)}}function o(e){try{c(s.throw(e))}catch(e){t(e)}}function c(t){var i;t.done?e(t.value):(i=t.value,i instanceof r?i:new r((function(e){e(i)}))).then(n,o)}c((s=s.apply(i,a||[])).next())}))}(this.qList,this.aLink.dataURL)}))},new((a=void 0)||(a=Promise))((function(e,n){function s(e){try{c(r.next(e))}catch(e){n(e)}}function o(e){try{c(r.throw(e))}catch(e){n(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,o)}c((r=r.apply(t,i||[])).next())}));var t,i,a,r}hasAnotherQueston(){return this.qList.length-1>=this.qNum}getNextQuestion(){return this.qList[this.qNum]}}function sn(e,t,n){if(t>n)return null;var i=parseInt((t+n)/2+"");const a={data:e[i],left:null,right:null};return a.left=sn(e,t,i-1),a.right=sn(e,i+1,n),a}!function(e){e[e.BinarySearch=0]="BinarySearch",e[e.LinearSearchUp=1]="LinearSearchUp",e[e.LinearSearchDown=2]="LinearSearchDown"}(an||(an={}));class on extends en{constructor(e){super(),this.buildBuckets=()=>function(e){return tn(this,void 0,void 0,(function*(){return nn(e).then((e=>e.buckets))}))}(this.aLink.dataURL).then((e=>{this.buckets=e,this.numBuckets=e.length,this.bucketArray=Array.from(Array(this.numBuckets),((e,t)=>t+1));var t=sn(this.bucketArray,1,this.numBuckets);console.log(t),this.basalBucket=this.numBuckets+1,this.ceilingBucket=-1,this.curNode=t,this.tryMoveBucket(t.data)})),this.initBucket=e=>{this.curBucket=e,this.curBucket.usedItems=[],this.curBucket.numTried=0,this.curBucket.numCorrect=0,this.curBucket.numConsecutiveWrong=0,this.curBucket.tested=!0},this.tryAnswer=(e,t)=>{Xt(this.curQ,e,t),this.curBucket.numTried+=1,this.curQ.answers[e-1].answerName==this.curQ.correct?(this.curBucket.numCorrect+=1,this.curBucket.numConsecutiveWrong=0):this.curBucket.numConsecutiveWrong=0,S(!0),setTimeout((()=>{this.onQuestionEnd()}),2e3)},this.onQuestionEnd=()=>{S(!1),this.hasAnotherQueston()?E(this.getNextQuestion()):(console.log("no questions left"),this.onEnd())},this.getNextQuestion=()=>{var e,t,n,i;do{e=cn(this.curBucket.items)}while(this.curBucket.usedItems.includes(e));this.curBucket.usedItems.push(e);do{t=cn(this.curBucket.items)}while(e==t);do{n=cn(this.curBucket.items)}while(e==n||t==n);do{i=cn(this.curBucket.items)}while(e==i||t==i||n==i);var a=[e,t,n,i];!function(e){for(let t=e.length-1;t>0;t--){const n=Math.floor(Math.random()*(t+1));[e[t],e[n]]=[e[n],e[t]]}}(a);var r={qName:"question"+this.questionNum+"-"+e.itemName,promptText:e.itemText,answers:[{answerName:a[0].itemName,answerText:a[0].itemText},{answerName:a[1].itemName,answerText:a[1].itemText},{answerName:a[2].itemName,answerText:a[2].itemText},{answerName:a[3].itemName,answerText:a[3].itemText}]};return this.curQ=r,this.questionNum+=1,r},this.tryMoveBucket=e=>{console.log("new  bucket is "+e),this.initBucket(e)},this.hasAnotherQueston=()=>{var e=!0;return this.curBucket.numCorrect>=4&&(this.curBucket.bucketID>=this.numBuckets?e=!1:null!=this.curNode.right&&(this.curNode=this.curNode.right,this.tryMoveBucket(this.curNode.data))),(this.curBucket.numConsecutiveWrong>=2||this.curBucket.numTried>=5)&&(this.curBucket.bucketID<this.basalBucket&&(this.basalBucket=this.curBucket.bucketID),this.curBucket.bucketID<=1?e=!1:null!=this.curNode.left&&(this.curNode=this.curNode.left,this.tryMoveBucket(this.curNode.data))),e},this.dataURL=e,this.questionNum=0,console.log("app initialized"),k(this.tryAnswer)}run(e){this.aLink=e,this.buildBuckets().then((e=>{console.log(this.curBucket),E(this.getNextQuestion())}))}}function cn(e){return e[Math.floor(Math.random()*e.length)]}class ln{constructor(){"undefined"!=typeof Unity?this.unityReference=Unity:this.unityReference=null}SendMessage(e){null!==this.unityReference&&this.unityReference.call(e)}sendLoaded(){null!==this.unityReference?this.unityReference.call("loaded"):console.log("would call Unity loaded now")}sendClose(){null!==this.unityReference?this.unityReference.call("close"):console.log("would close Unity now")}}Be("firebase","9.12.1","app");(new class{constructor(){var e;this.unity=new ln,this.unity.sendLoaded(),console.log("Initializing app..."),this.dataURL=(null==(e=t().get("data"))&&(console.log("default data file"),e="survey-zulu"),e);const n=function(e=function(e="[DEFAULT]"){const t=ve.get(e);if(!t&&e===ye)return _e();if(!t)throw Ce.create("no-app",{appName:e});return t}()){const t=ke(e=F(e),yt);return t.isInitialized()?t.getImmediate():function(e,t={}){const n=ke(e,yt);if(n.isInitialized()){const e=n.getImmediate();if(P(t,n.getOptions()))return e;throw Et.create("already-initialized")}return n.initialize({options:t})}(e)}(_e({apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:7b1b1181864d28b49de10c",measurementId:"G-FF1159TGCF"}));this.analytics=n,Rt(n,"notification_received"),Rt(n,"test initialization event",{}),console.log("firebase initialized")}spinUp(){return e=this,n=void 0,a=function*(){(function(e){return tn(this,void 0,void 0,(function*(){return nn(e).then((e=>e.appType))}))})(this.dataURL).then((e=>{var n,i,a,r,s;console.log("spinning up"),console.log(e),"survey"==e&&(this.game=new rn(this.dataURL)),"assessment"==e&&(this.game=new on(this.dataURL)),null==(a=t().get("uuid"))&&(console.log("no uuid provided"),a="WebUserNoID"),n=a,i=function(){var e=t().get("userSource");return null==e&&(console.log("no user source provided"),e="WebUserNoSource"),e}(),qt=n,zt=i,r=this.analytics,s=this.dataURL,Qt=r,Zt=s,function(){console.log("starting to get location"),fetch("https://ipinfo.io/json?token=b6268727178610").then((e=>{if(console.log("got location response"),!e.ok)throw Error(e.statusText);return e.json()})).then((e=>(console.log(e),Kt=e.loc,Gt=e.city,Jt=e.region,Yt=e.country,function(){var e=Kt.split(","),t=parseFloat(e[0]).toFixed(2),n=parseFloat(e[1]).toFixed(1);Wt=t,Vt=n,Kt="",e=[];var i="user "+qt+" is at location "+t+","+n;console.log(i),Rt(Qt,"user_location",{user:qt,app:Zt,lat:t,lon:n}),Rt(Qt,"initialized",{type:"initialized",clUserId:qt,userSource:zt,lat:Wt,lon:Vt,city:Gt,region:Jt,country:Yt})}(),{}))).catch((e=>{console.warn(`location failed to update! encountered error ${e.msg}`)}));var e="user "+qt+" opened the assessment";console.log(e),Rt(Qt,"opened",{})}(),this.game.run(this)}))},new((i=void 0)||(i=Promise))((function(t,r){function s(e){try{c(a.next(e))}catch(e){r(e)}}function o(e){try{c(a.throw(e))}catch(e){r(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(e){e(n)}))).then(s,o)}c((a=a.apply(e,n||[])).next())}));var e,n,i,a}}).spinUp()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,