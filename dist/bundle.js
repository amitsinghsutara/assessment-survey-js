/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={};function t(){var e=n().get("data");return null==e&&(console.log("default data file"),e="zulu-lettersounds"),e}function n(){const e=window.location.search;return new URLSearchParams(e)}e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();var i=function(e,t,n,i){return new(n||(n=Promise))((function(s,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function o(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,o)}c((i=i.apply(e,t||[])).next())}))};function s(e){return"/data/"+e+".json"}function a(e){return i(this,void 0,void 0,(function*(){var t=s(e);return fetch(t).then((e=>e.json()))}))}class r{constructor(){this.imageToCache=[],this.wavToCache=[],this.allAudios={},this.allImages={},this.dataURL="",this.correctSoundPath="dist/audio/Correct.wav",this.feedbackAudio=null,this.correctAudio=null}init(){this.feedbackAudio=new Audio,this.feedbackAudio.src=this.correctSoundPath,this.correctAudio=new Audio}static PrepareAudioAndImagesForSurvey(e,t){r.getInstance().dataURL=t;const n="audio/"+r.getInstance().dataURL+"/answer_feedback.mp3";for(var i in r.getInstance().wavToCache.push(n),r.getInstance().correctAudio.src=n,e){let t=e[i];for(var s in null!=t.promptAudio&&r.FilterAndAddAudioToAllAudios(t.promptAudio),null!=t.promptImg&&r.AddImageToAllImages(t.promptImg),t.answers){let e=t.answers[s];null!=e.answerImg&&r.AddImageToAllImages(e.answerImg)}}console.log(r.getInstance().allAudios),console.log(r.getInstance().allImages)}static AddImageToAllImages(e){console.log("Add image: "+e);let t=new Image;t.src=e,r.getInstance().allImages[e]=t}static FilterAndAddAudioToAllAudios(e){console.log("Adding audio: "+e),e.includes(".wav")?e=e.replace(".wav",".mp3"):e.includes(".mp3")||(e=e.trim()+".mp3"),console.log("Filtered: "+e);let t=new Audio;["luganda"].includes(r.getInstance().dataURL.split("-")[0])?t.src="audio/"+r.getInstance().dataURL+"/"+e.toLowerCase():t.src="audio/"+r.getInstance().dataURL+"/"+e,r.getInstance().allAudios[e]=t,console.log(t.src)}static PreloadBucket(e,t){for(var n in r.getInstance().dataURL=t,r.getInstance().correctAudio.src="audio/"+r.getInstance().dataURL+"/answer_feedback.mp3",e.items){var i=e.items[n];r.FilterAndAddAudioToAllAudios(i.itemName)}}static PlayAudio(e,t,n){console.log("trying to play "+e),e.includes(".mp3")?".mp3"!=e.slice(-4)&&(e=e.trim()+".mp3"):e=e.trim()+".mp3",console.log("Pre play all audios: "),console.log(r.getInstance().allAudios),new Promise(((t,i)=>{const s=r.getInstance().allAudios[e];s?(s.addEventListener("play",(()=>{void 0!==n&&n(!0)})),s.addEventListener("ended",(()=>{void 0!==n&&n(!1),t()})),s.play().catch((e=>{console.error("Error playing audio:",e),t()}))):(console.warn("Audio file not found:",e),t())})).then((()=>{void 0!==t&&t()})).catch((e=>{console.error("Promise error:",e)}))}static GetImage(e){return r.getInstance().allImages[e]}static PlayDing(){r.getInstance().feedbackAudio.play()}static PlayCorrect(){r.getInstance().correctAudio.play()}static getInstance(){return null==r.instance&&(r.instance=new r,r.instance.init()),r.instance}}function o(e){return e[Math.floor(Math.random()*e.length)]}function c(e){for(let t=e.length-1;t>0;t--){const n=Math.floor(Math.random()*(t+1));[e[t],e[n]]=[e[n],e[t]]}}r.instance=null;class l{constructor(){this.landingContainerId="landWrap",this.gameContainerId="gameWrap",this.endContainerId="endWrap",this.starContainerId="starWrapper",this.chestContainerId="chestWrapper",this.questionsContainerId="qWrap",this.feedbackContainerId="feedbackWrap",this.answersContainerId="aWrap",this.answerButton1Id="answerButton1",this.answerButton2Id="answerButton2",this.answerButton3Id="answerButton3",this.answerButton4Id="answerButton4",this.answerButton5Id="answerButton5",this.answerButton6Id="answerButton6",this.playButtonId="pbutton",this.chestImgId="chestImage",this.nextQuestion=null,this.contentLoaded=!1,this.shown=!1,this.stars=[],this.starPositions=Array(),this.qAnsNum=0,this.buttons=[],this.buttonsActive=!1}init(){this.landingContainer=document.getElementById(this.landingContainerId),this.gameContainer=document.getElementById(this.gameContainerId),this.endContainer=document.getElementById(this.endContainerId),this.starContainer=document.getElementById(this.starContainerId),this.chestContainer=document.getElementById(this.chestContainerId),this.questionsContainer=document.getElementById(this.questionsContainerId),this.feedbackContainer=document.getElementById(this.feedbackContainerId),this.answersContainer=document.getElementById(this.answersContainerId),this.answerButton1=document.getElementById(this.answerButton1Id),this.answerButton2=document.getElementById(this.answerButton2Id),this.answerButton3=document.getElementById(this.answerButton3Id),this.answerButton4=document.getElementById(this.answerButton4Id),this.answerButton5=document.getElementById(this.answerButton5Id),this.answerButton6=document.getElementById(this.answerButton6Id),this.playButton=document.getElementById(this.playButtonId),this.chestImg=document.getElementById(this.chestImgId),this.initializeStars(),this.initEventListeners()}initializeStars(){for(let e=0;e<20;e++){const t=document.createElement("img");t.id="star"+e,t.classList.add("topstarv"),this.starContainer.appendChild(t),this.starContainer.innerHTML+="",9==e&&(this.starContainer.innerHTML+="<br>"),this.stars.push(e)}c(this.stars)}static OverlappingOtherStars(e,t,n,i){if(e.length<1)return!1;for(let s=0;s<e.length;s++){const a=e[s].x-t,r=e[s].y-n;if(Math.sqrt(a*a+r*r)<i)return!0}return!1}initEventListeners(){this.answerButton1.addEventListener("click",(()=>{this.answerButtonPress(1)})),this.buttons.push(this.answerButton1),this.answerButton2.addEventListener("click",(()=>{this.answerButtonPress(2)})),this.buttons.push(this.answerButton2),this.answerButton3.addEventListener("click",(()=>{this.answerButtonPress(3)})),this.buttons.push(this.answerButton3),this.answerButton4.addEventListener("click",(()=>{this.answerButtonPress(4)})),this.buttons.push(this.answerButton4),this.answerButton5.addEventListener("click",(()=>{this.answerButtonPress(5)})),this.buttons.push(this.answerButton5),this.answerButton6.addEventListener("click",(()=>{this.answerButtonPress(6)})),this.buttons.push(this.answerButton6),this.landingContainer.addEventListener("click",(()=>{localStorage.getItem(t())&&this.showGame()}))}showOptions(){if(!l.getInstance().shown){const e=l.getInstance().nextQuestion,t=l.getInstance().buttons;let n=220;const i=150;l.getInstance().shown=!0;let s=0;t.forEach((e=>{e.style.visibility="hidden",e.style.animation=""})),setTimeout((()=>{for(let i=0;i<e.answers.length;i++){const a=e.answers[i],o=t[i];o.innerHTML="answerText"in a?a.answerText:"",o.style.visibility="hidden",o.style.boxShadow="0px 0px 0px 0px rgba(0,0,0,0)",setTimeout((()=>{if(o.style.visibility="visible",o.style.boxShadow="0px 6px 8px #606060",o.style.animation=`zoomIn ${n}ms ease forwards`,"answerImg"in a){const e=r.GetImage(a.answerImg);o.appendChild(e)}o.addEventListener("animationend",(()=>{s++,s===e.answers.length&&l.getInstance().enableAnswerButton()}))}),i*n*.3)}}),i),l.getInstance().qStart=Date.now()}}enableAnswerButton(){l.getInstance().buttonsActive=!0}static SetFeedbackText(e){console.log("Feedback text set to "+e),l.getInstance().feedbackContainer.innerHTML=e}showLanding(){this.landingContainer.style.display="flex",this.gameContainer.style.display="none",this.endContainer.style.display="none"}static ShowEnd(){l.getInstance().landingContainer.style.display="none",l.getInstance().gameContainer.style.display="none",l.getInstance().endContainer.style.display="flex"}showGame(){this.landingContainer.style.display="none",this.gameContainer.style.display="grid",this.endContainer.style.display="none",this.allStart=Date.now(),this.startPressCallback()}static SetFeedbackVisibile(e){e?(l.getInstance().feedbackContainer.classList.remove("hidden"),l.getInstance().feedbackContainer.classList.add("visible"),r.PlayCorrect(),l.getInstance().buttonsActive=!1):(l.getInstance().feedbackContainer.classList.remove("visible"),l.getInstance().feedbackContainer.classList.add("hidden"),l.getInstance().buttonsActive=!1)}static ReadyForNext(e){for(var t in console.log("ready for next!"),l.getInstance().answersContainer.style.visibility="hidden",l.getInstance().buttons)l.getInstance().buttons[t].style.visibility="hidden";l.getInstance().shown=!1,l.getInstance().nextQuestion=e,l.getInstance().questionsContainer.innerHTML="",l.getInstance().questionsContainer.style.display="none",l.getInstance().playButton.innerHTML="<button id='nextqButton'><img class=audio-button width='100px' height='100px' src='/img/SoundButton_Idle.png' type='image/svg+xml'> </img></button>",document.getElementById("nextqButton").addEventListener("click",(function(){l.ShowQuestion(),r.PlayAudio(e.promptAudio,l.getInstance().showOptions,l.ShowAudioAnimation)}))}static ShowAudioAnimation(e=!1){l.getInstance().playButton.querySelector("img").src=e?"animation/SoundButton.gif":"/img/SoundButton_Idle.png"}static ShowQuestion(e){l.getInstance().playButton.innerHTML="<button id='nextqButton'><img class=audio-button width='100px' height='100px' src='/img/SoundButton_Idle.png' type='image/svg+xml'> </img></button>",document.getElementById("nextqButton").addEventListener("click",(function(){console.log("next question button pressed"),console.log(e.promptAudio),"promptAudio"in e&&r.PlayAudio(e.promptAudio,void 0,l.ShowAudioAnimation)})),l.getInstance().answersContainer.style.visibility="visible";let t="";if(l.getInstance().questionsContainer.innerHTML="",void 0===e&&(e=l.getInstance().nextQuestion),"promptImg"in e){var n=r.GetImage(e.promptImg);l.getInstance().questionsContainer.appendChild(n)}for(var i in t+=e.promptText,t+="<BR>",l.getInstance().questionsContainer.innerHTML+=t,l.getInstance().buttons)l.getInstance().buttons[i].style.visibility="hidden"}static AddStar(){var e=document.getElementById("star"+l.getInstance().stars[l.getInstance().qAnsNum]);e.src="../animation/Star.gif",e.classList.add("topstarv"),e.classList.remove("topstarh"),e.style.position="absolute";let t=l.instance.starContainer.offsetWidth,n=l.instance.starContainer.offsetHeight;console.log("Stars Container dimensions: ",t,n);let i=0,s=0;do{i=Math.floor(Math.random()*(t-60)),s=Math.floor(Math.random()*n)}while(l.OverlappingOtherStars(l.instance.starPositions,i,s,50));e.style.transform="scale(10)",e.style.transition="top 1s ease, left 1s ease, transform 0.5s ease",e.style.zIndex="500",e.style.top=window.innerHeight/2+"px",e.style.left=l.instance.gameContainer.offsetWidth/2-e.offsetWidth/2+"px",setTimeout((()=>{if(e.style.transition="top 2s ease, left 2s ease, transform 2s ease",i<t/2){const t=5+8*Math.random();console.log("Rotating star to the right",t),e.style.transform="rotate(-"+t+"deg) scale(1)"}else{const t=5+8*Math.random();console.log("Rotating star to the left",t),e.style.transform="rotate("+t+"deg) scale(1)"}e.style.left=20+i+"px",e.style.top=60+s+"px"}),1e3),l.instance.starPositions.push({x:i,y:s}),l.getInstance().qAnsNum+=1}static ChangeStarImageAfterAnimation(){document.getElementById("star"+l.getInstance().stars[l.getInstance().qAnsNum-1]).src="../img/star_after_animation.gif"}answerButtonPress(e){const t=this.buttons.every((e=>"visible"===e.style.visibility));if(console.log(this.buttonsActive,t),!0===this.buttonsActive){r.PlayDing();const t=Date.now()-this.qStart;console.log("answered in "+t),this.buttonPressCallback(e,t)}}static ProgressChest(){const e=document.getElementById("chestImage");let t=e.src;console.log("Chest Progression--\x3e",e),console.log("Chest Progression--\x3e",e.src);const n=parseInt(t.slice(-6,-4),10);console.log("Chest Progression number--\x3e",n);const i=`img/chestprogression/TreasureChestOpen0${n%4+1}.svg`;e.src=i}static SetContentLoaded(e){l.getInstance().contentLoaded=e}static SetButtonPressAction(e){l.getInstance().buttonPressCallback=e}static SetStartAction(e){l.getInstance().startPressCallback=e}static getInstance(){return null===l.instance&&(l.instance=new l,l.instance.init()),l.instance}}l.instance=null;const u=function(e){const t=[];let n=0;for(let i=0;i<e.length;i++){let s=e.charCodeAt(i);s<128?t[n++]=s:s<2048?(t[n++]=s>>6|192,t[n++]=63&s|128):55296==(64512&s)&&i+1<e.length&&56320==(64512&e.charCodeAt(i+1))?(s=65536+((1023&s)<<10)+(1023&e.charCodeAt(++i)),t[n++]=s>>18|240,t[n++]=s>>12&63|128,t[n++]=s>>6&63|128,t[n++]=63&s|128):(t[n++]=s>>12|224,t[n++]=s>>6&63|128,t[n++]=63&s|128)}return t},d={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[];for(let t=0;t<e.length;t+=3){const s=e[t],a=t+1<e.length,r=a?e[t+1]:0,o=t+2<e.length,c=o?e[t+2]:0,l=s>>2,u=(3&s)<<4|r>>4;let d=(15&r)<<2|c>>6,h=63&c;o||(h=64,a||(d=64)),i.push(n[l],n[u],n[d],n[h])}return i.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(u(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,i=0;for(;n<e.length;){const s=e[n++];if(s<128)t[i++]=String.fromCharCode(s);else if(s>191&&s<224){const a=e[n++];t[i++]=String.fromCharCode((31&s)<<6|63&a)}else if(s>239&&s<365){const a=((7&s)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[i++]=String.fromCharCode(55296+(a>>10)),t[i++]=String.fromCharCode(56320+(1023&a))}else{const a=e[n++],r=e[n++];t[i++]=String.fromCharCode((15&s)<<12|(63&a)<<6|63&r)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,i=[];for(let t=0;t<e.length;){const s=n[e.charAt(t++)],a=t<e.length?n[e.charAt(t)]:0;++t;const r=t<e.length?n[e.charAt(t)]:64;++t;const o=t<e.length?n[e.charAt(t)]:64;if(++t,null==s||null==a||null==r||null==o)throw Error();const c=s<<2|a>>4;if(i.push(c),64!==r){const e=a<<4&240|r>>2;if(i.push(e),64!==o){const e=r<<6&192|o;i.push(e)}}}return i},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},h=function(e){return function(e){const t=u(e);return d.encodeByteArray(t,!0)}(e).replace(/\./g,"")};function p(){return"object"==typeof indexedDB}function g(){return new Promise(((e,t)=>{try{let n=!0;const i="validate-browser-context-for-indexeddb-analytics-module",s=self.indexedDB.open(i);s.onsuccess=()=>{s.result.close(),n||self.indexedDB.deleteDatabase(i),e(!0)},s.onupgradeneeded=()=>{n=!1},s.onerror=()=>{var e;t((null===(e=s.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}const f=()=>{try{return function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e.g)return e.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&function(e){try{return d.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null}(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}};class m{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}class w extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,w.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,v.prototype.create)}}class v{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},i=`${this.service}/${e}`,s=this.errors[e],a=s?function(e,t){return e.replace(b,((e,n)=>{const i=t[n];return null!=i?String(i):`<${n}?>`}))}(s,n):"Error",r=`${this.serviceName}: ${a} (${i}).`;return new w(i,r,n)}}const b=/\{\$([^}]+)}/g;function y(e,t){if(e===t)return!0;const n=Object.keys(e),i=Object.keys(t);for(const s of n){if(!i.includes(s))return!1;const n=e[s],a=t[s];if(I(n)&&I(a)){if(!y(n,a))return!1}else if(n!==a)return!1}for(const e of i)if(!n.includes(e))return!1;return!0}function I(e){return null!==e&&"object"==typeof e}function S(e,t=1e3,n=2){const i=t*Math.pow(n,e),s=Math.round(.5*i*(Math.random()-.5)*2);return Math.min(144e5,i+s)}function C(e){return e&&e._delegate?e._delegate:e}class k{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const E="[DEFAULT]";class B{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new m;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),i=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(i)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(i)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:E})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e="[DEFAULT]"){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e="[DEFAULT]"){return this.instances.has(e)}getOptions(e="[DEFAULT]"){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const i=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(i);return i}onInit(e,t){var n;const i=this.normalizeInstanceIdentifier(t),s=null!==(n=this.onInitCallbacks.get(i))&&void 0!==n?n:new Set;s.add(e),this.onInitCallbacks.set(i,s);const a=this.instances.get(i);return a&&e(a,i),()=>{s.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const i of n)try{i(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(i=e,i===E?void 0:i),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var i;return n||null}normalizeInstanceIdentifier(e="[DEFAULT]"){return this.component?this.component.multipleInstances?e:E:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class A{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new B(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}const T=[];var L;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(L||(L={}));const D={debug:L.DEBUG,verbose:L.VERBOSE,info:L.INFO,warn:L.WARN,error:L.ERROR,silent:L.SILENT},N=L.INFO,P={[L.DEBUG]:"log",[L.VERBOSE]:"log",[L.INFO]:"info",[L.WARN]:"warn",[L.ERROR]:"error"},x=(e,t,...n)=>{if(t<e.logLevel)return;const i=(new Date).toISOString(),s=P[t];if(!s)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[s](`[${i}]  ${e.name}:`,...n)};class M{constructor(e){this.name=e,this._logLevel=N,this._logHandler=x,this._userLogHandler=null,T.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in L))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?D[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,L.DEBUG,...e),this._logHandler(this,L.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,L.VERBOSE,...e),this._logHandler(this,L.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,L.INFO,...e),this._logHandler(this,L.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,L.WARN,...e),this._logHandler(this,L.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,L.ERROR,...e),this._logHandler(this,L.ERROR,...e)}}let R,O;const F=new WeakMap,j=new WeakMap,U=new WeakMap,$=new WeakMap,q=new WeakMap;let H={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return j.get(e);if("objectStoreNames"===t)return e.objectStoreNames||U.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return z(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function W(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(O||(O=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(V(this),e),z(F.get(this))}:function(...e){return z(t.apply(V(this),e))}:function(e,...n){const i=t.call(V(this),e,...n);return U.set(i,e.sort?e.sort():[e]),z(i)}:(e instanceof IDBTransaction&&function(e){if(j.has(e))return;const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("complete",s),e.removeEventListener("error",a),e.removeEventListener("abort",a)},s=()=>{t(),i()},a=()=>{n(e.error||new DOMException("AbortError","AbortError")),i()};e.addEventListener("complete",s),e.addEventListener("error",a),e.addEventListener("abort",a)}));j.set(e,t)}(e),n=e,(R||(R=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(e,H):e);var t,n}function z(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("success",s),e.removeEventListener("error",a)},s=()=>{t(z(e.result)),i()},a=()=>{n(e.error),i()};e.addEventListener("success",s),e.addEventListener("error",a)}));return t.then((t=>{t instanceof IDBCursor&&F.set(t,e)})).catch((()=>{})),q.set(t,e),t}(e);if($.has(e))return $.get(e);const t=W(e);return t!==e&&($.set(e,t),q.set(t,e)),t}const V=e=>q.get(e);function Q(e,t,{blocked:n,upgrade:i,blocking:s,terminated:a}={}){const r=indexedDB.open(e,t),o=z(r);return i&&r.addEventListener("upgradeneeded",(e=>{i(z(r.result),e.oldVersion,e.newVersion,z(r.transaction))})),n&&r.addEventListener("blocked",(()=>n())),o.then((e=>{a&&e.addEventListener("close",(()=>a())),s&&e.addEventListener("versionchange",(()=>s()))})).catch((()=>{})),o}const G=["get","getKey","getAll","getAllKeys","count"],K=["put","add","delete","clear"],J=new Map;function Y(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(J.get(t))return J.get(t);const n=t.replace(/FromIndex$/,""),i=t!==n,s=K.includes(n);if(!(n in(i?IDBIndex:IDBObjectStore).prototype)||!s&&!G.includes(n))return;const a=async function(e,...t){const a=this.transaction(e,s?"readwrite":"readonly");let r=a.store;return i&&(r=r.index(t.shift())),(await Promise.all([r[n](...t),s&&a.done]))[0]};return J.set(t,a),a}var Z;Z=H,H={...Z,get:(e,t,n)=>Y(e,t)||Z.get(e,t,n),has:(e,t)=>!!Y(e,t)||Z.has(e,t)};class X{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const ee="@firebase/app",te="0.8.2",ne=new M("@firebase/app"),ie="[DEFAULT]",se={[ee]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},ae=new Map,re=new Map;function oe(e,t){try{e.container.addComponent(t)}catch(n){ne.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function ce(e){const t=e.name;if(re.has(t))return ne.debug(`There were multiple attempts to register component ${t}.`),!1;re.set(t,e);for(const t of ae.values())oe(t,e);return!0}function le(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}const ue=new v("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."});class de{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new k("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw ue.create("app-deleted",{appName:this._name})}}function he(e,t={}){let n=e;"object"!=typeof t&&(t={name:t});const i=Object.assign({name:ie,automaticDataCollectionEnabled:!1},t),s=i.name;if("string"!=typeof s||!s)throw ue.create("bad-app-name",{appName:String(s)});var a;if(n||(n=null===(a=f())||void 0===a?void 0:a.config),!n)throw ue.create("no-options");const r=ae.get(s);if(r){if(y(n,r.options)&&y(i,r.config))return r;throw ue.create("duplicate-app",{appName:s})}const o=new A(s);for(const e of re.values())o.addComponent(e);const c=new de(n,i,o);return ae.set(s,c),c}function pe(e,t,n){var i;let s=null!==(i=se[e])&&void 0!==i?i:e;n&&(s+=`-${n}`);const a=s.match(/\s|\//),r=t.match(/\s|\//);if(a||r){const e=[`Unable to register library "${s}" with version "${t}":`];return a&&e.push(`library name "${s}" contains illegal characters (whitespace or "/")`),a&&r&&e.push("and"),r&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void ne.warn(e.join(" "))}ce(new k(`${s}-version`,(()=>({library:s,version:t})),"VERSION"))}const ge="firebase-heartbeat-store";let fe=null;function me(){return fe||(fe=Q("firebase-heartbeat-database",1,{upgrade:(e,t)=>{0===t&&e.createObjectStore(ge)}}).catch((e=>{throw ue.create("idb-open",{originalErrorMessage:e.message})}))),fe}async function we(e,t){var n;try{const n=(await me()).transaction(ge,"readwrite"),i=n.objectStore(ge);return await i.put(t,ve(e)),n.done}catch(e){if(e instanceof w)ne.warn(e.message);else{const t=ue.create("idb-set",{originalErrorMessage:null===(n=e)||void 0===n?void 0:n.message});ne.warn(t.message)}}}function ve(e){return`${e.name}!${e.options.appId}`}class be{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new Ie(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=ye();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=ye(),{heartbeatsToSend:t,unsentEntries:n}=function(e,t=1024){const n=[];let i=e.slice();for(const s of e){const e=n.find((e=>e.agent===s.agent));if(e){if(e.dates.push(s.date),Se(n)>t){e.dates.pop();break}}else if(n.push({agent:s.agent,dates:[s.date]}),Se(n)>t){n.pop();break}i=i.slice(1)}return{heartbeatsToSend:n,unsentEntries:i}}(this._heartbeatsCache.heartbeats),i=h(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,n.length>0?(this._heartbeatsCache.heartbeats=n,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),i}}function ye(){return(new Date).toISOString().substring(0,10)}class Ie{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!p()&&g().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const e=await async function(e){var t;try{return(await me()).transaction(ge).objectStore(ge).get(ve(e))}catch(e){if(e instanceof w)ne.warn(e.message);else{const n=ue.create("idb-get",{originalErrorMessage:null===(t=e)||void 0===t?void 0:t.message});ne.warn(n.message)}}}(this.app);return e||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return we(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return we(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function Se(e){return h(JSON.stringify({version:2,heartbeats:e})).length}ce(new k("platform-logger",(e=>new X(e)),"PRIVATE")),ce(new k("heartbeat",(e=>new be(e)),"PRIVATE")),pe(ee,te,""),pe(ee,te,"esm2017"),pe("fire-js","");const Ce="@firebase/installations",ke="0.5.15",Ee="w:0.5.15",Be=new v("installations","Installations",{"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."});function Ae(e){return e instanceof w&&e.code.includes("request-failed")}function Te({projectId:e}){return`https://firebaseinstallations.googleapis.com/v1/projects/${e}/installations`}function Le(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}async function De(e,t){const n=(await t.json()).error;return Be.create("request-failed",{requestName:e,serverCode:n.code,serverMessage:n.message,serverStatus:n.status})}function _e({apiKey:e}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}async function Ne(e){const t=await e();return t.status>=500&&t.status<600?e():t}function Pe(e){return new Promise((t=>{setTimeout(t,e)}))}const xe=/^[cdef][\w-]{21}$/;function Me(){try{const e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;const t=function(e){return(t=e,btoa(String.fromCharCode(...t)).replace(/\+/g,"-").replace(/\//g,"_")).substr(0,22);var t}(e);return xe.test(t)?t:""}catch(e){return""}}function Re(e){return`${e.appName}!${e.appId}`}const Oe=new Map;function Fe(e,t){const n=Re(e);je(n,t),function(e,t){const n=(!Ue&&"BroadcastChannel"in self&&(Ue=new BroadcastChannel("[Firebase] FID Change"),Ue.onmessage=e=>{je(e.data.key,e.data.fid)}),Ue);n&&n.postMessage({key:e,fid:t}),0===Oe.size&&Ue&&(Ue.close(),Ue=null)}(n,t)}function je(e,t){const n=Oe.get(e);if(n)for(const e of n)e(t)}let Ue=null;const $e="firebase-installations-store";let qe=null;function He(){return qe||(qe=Q("firebase-installations-database",1,{upgrade:(e,t)=>{0===t&&e.createObjectStore($e)}})),qe}async function We(e,t){const n=Re(e),i=(await He()).transaction($e,"readwrite"),s=i.objectStore($e),a=await s.get(n);return await s.put(t,n),await i.done,a&&a.fid===t.fid||Fe(e,t.fid),t}async function ze(e){const t=Re(e),n=(await He()).transaction($e,"readwrite");await n.objectStore($e).delete(t),await n.done}async function Ve(e,t){const n=Re(e),i=(await He()).transaction($e,"readwrite"),s=i.objectStore($e),a=await s.get(n),r=t(a);return void 0===r?await s.delete(n):await s.put(r,n),await i.done,!r||a&&a.fid===r.fid||Fe(e,r.fid),r}async function Qe(e){let t;const n=await Ve(e.appConfig,(n=>{const i=function(e){return Je(e||{fid:Me(),registrationStatus:0})}(n),s=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine)return{installationEntry:t,registrationPromise:Promise.reject(Be.create("app-offline"))};const n={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},i=async function(e,t){try{const n=await async function({appConfig:e,heartbeatServiceProvider:t},{fid:n}){const i=Te(e),s=_e(e),a=t.getImmediate({optional:!0});if(a){const e=await a.getHeartbeatsHeader();e&&s.append("x-firebase-client",e)}const r={fid:n,authVersion:"FIS_v2",appId:e.appId,sdkVersion:Ee},o={method:"POST",headers:s,body:JSON.stringify(r)},c=await Ne((()=>fetch(i,o)));if(c.ok){const e=await c.json();return{fid:e.fid||n,registrationStatus:2,refreshToken:e.refreshToken,authToken:Le(e.authToken)}}throw await De("Create Installation",c)}(e,t);return We(e.appConfig,n)}catch(n){throw Ae(n)&&409===n.customData.serverCode?await ze(e.appConfig):await We(e.appConfig,{fid:t.fid,registrationStatus:0}),n}}(e,n);return{installationEntry:n,registrationPromise:i}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:Ge(e)}:{installationEntry:t}}(e,i);return t=s.registrationPromise,s.installationEntry}));return""===n.fid?{installationEntry:await t}:{installationEntry:n,registrationPromise:t}}async function Ge(e){let t=await Ke(e.appConfig);for(;1===t.registrationStatus;)await Pe(100),t=await Ke(e.appConfig);if(0===t.registrationStatus){const{installationEntry:t,registrationPromise:n}=await Qe(e);return n||t}return t}function Ke(e){return Ve(e,(e=>{if(!e)throw Be.create("installation-not-found");return Je(e)}))}function Je(e){return 1===(t=e).registrationStatus&&t.registrationTime+1e4<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}async function Ye({appConfig:e,heartbeatServiceProvider:t},n){const i=function(e,{fid:t}){return`${Te(e)}/${t}/authTokens:generate`}(e,n),s=function(e,{refreshToken:t}){const n=_e(e);return n.append("Authorization",function(e){return`FIS_v2 ${e}`}(t)),n}(e,n),a=t.getImmediate({optional:!0});if(a){const e=await a.getHeartbeatsHeader();e&&s.append("x-firebase-client",e)}const r={installation:{sdkVersion:Ee,appId:e.appId}},o={method:"POST",headers:s,body:JSON.stringify(r)},c=await Ne((()=>fetch(i,o)));if(c.ok)return Le(await c.json());throw await De("Generate Auth Token",c)}async function Ze(e,t=!1){let n;const i=await Ve(e.appConfig,(i=>{if(!et(i))throw Be.create("not-registered");const s=i.authToken;if(!t&&(2===(a=s).requestStatus&&!function(e){const t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+36e5}(a)))return i;var a;if(1===s.requestStatus)return n=async function(e,t){let n=await Xe(e.appConfig);for(;1===n.authToken.requestStatus;)await Pe(100),n=await Xe(e.appConfig);const i=n.authToken;return 0===i.requestStatus?Ze(e,t):i}(e,t),i;{if(!navigator.onLine)throw Be.create("app-offline");const t=function(e){const t={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},e),{authToken:t})}(i);return n=async function(e,t){try{const n=await Ye(e,t),i=Object.assign(Object.assign({},t),{authToken:n});return await We(e.appConfig,i),n}catch(n){if(!Ae(n)||401!==n.customData.serverCode&&404!==n.customData.serverCode){const n=Object.assign(Object.assign({},t),{authToken:{requestStatus:0}});await We(e.appConfig,n)}else await ze(e.appConfig);throw n}}(e,t),t}}));return n?await n:i.authToken}function Xe(e){return Ve(e,(e=>{if(!et(e))throw Be.create("not-registered");return 1===(t=e.authToken).requestStatus&&t.requestTime+1e4<Date.now()?Object.assign(Object.assign({},e),{authToken:{requestStatus:0}}):e;var t}))}function et(e){return void 0!==e&&2===e.registrationStatus}function tt(e){return Be.create("missing-app-config-values",{valueName:e})}const nt="installations";ce(new k(nt,(e=>{const t=e.getProvider("app").getImmediate(),n=function(e){if(!e||!e.options)throw tt("App Configuration");if(!e.name)throw tt("App Name");const t=["projectId","apiKey","appId"];for(const n of t)if(!e.options[n])throw tt(n);return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t);return{app:t,appConfig:n,heartbeatServiceProvider:le(t,"heartbeat"),_delete:()=>Promise.resolve()}}),"PUBLIC")),ce(new k("installations-internal",(e=>{const t=le(e.getProvider("app").getImmediate(),nt).getImmediate();return{getId:()=>async function(e){const t=e,{installationEntry:n,registrationPromise:i}=await Qe(t);return i?i.catch(console.error):Ze(t).catch(console.error),n.fid}(t),getToken:e=>async function(e,t=!1){const n=e;return await async function(e){const{registrationPromise:t}=await Qe(e);t&&await t}(n),(await Ze(n,t)).token}(t,e)}}),"PRIVATE")),pe(Ce,ke),pe(Ce,ke,"esm2017");const it="analytics",st="https://www.googletagmanager.com/gtag/js",at=new M("@firebase/analytics");function rt(e){return Promise.all(e.map((e=>e.catch((e=>e)))))}const ot=new v("analytics","Analytics",{"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.'}),ct=new class{constructor(e={},t=1e3){this.throttleMetadata=e,this.intervalMillis=t}getThrottleMetadata(e){return this.throttleMetadata[e]}setThrottleMetadata(e,t){this.throttleMetadata[e]=t}deleteThrottleMetadata(e){delete this.throttleMetadata[e]}};function lt(e){return new Headers({Accept:"application/json","x-goog-api-key":e})}async function ut(e,t=ct,n){const{appId:i,apiKey:s,measurementId:a}=e.options;if(!i)throw ot.create("no-app-id");if(!s){if(a)return{measurementId:a,appId:i};throw ot.create("no-api-key")}const r=t.getThrottleMetadata(i)||{backoffCount:0,throttleEndTimeMillis:Date.now()},o=new ht;return setTimeout((async()=>{o.abort()}),void 0!==n?n:6e4),dt({appId:i,apiKey:s,measurementId:a},r,o,t)}async function dt(e,{throttleEndTimeMillis:t,backoffCount:n},i,s=ct){var a,r;const{appId:o,measurementId:c}=e;try{await function(e,t){return new Promise(((n,i)=>{const s=Math.max(t-Date.now(),0),a=setTimeout(n,s);e.addEventListener((()=>{clearTimeout(a),i(ot.create("fetch-throttle",{throttleEndTimeMillis:t}))}))}))}(i,t)}catch(e){if(c)return at.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null===(a=e)||void 0===a?void 0:a.message}]`),{appId:o,measurementId:c};throw e}try{const t=await async function(e){var t;const{appId:n,apiKey:i}=e,s={method:"GET",headers:lt(i)},a="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig".replace("{app-id}",n),r=await fetch(a,s);if(200!==r.status&&304!==r.status){let e="";try{const n=await r.json();(null===(t=n.error)||void 0===t?void 0:t.message)&&(e=n.error.message)}catch(e){}throw ot.create("config-fetch-failed",{httpStatus:r.status,responseMessage:e})}return r.json()}(e);return s.deleteThrottleMetadata(o),t}catch(t){const a=t;if(!function(e){if(!(e instanceof w&&e.customData))return!1;const t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(a)){if(s.deleteThrottleMetadata(o),c)return at.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null==a?void 0:a.message}]`),{appId:o,measurementId:c};throw t}const l=503===Number(null===(r=null==a?void 0:a.customData)||void 0===r?void 0:r.httpStatus)?S(n,s.intervalMillis,30):S(n,s.intervalMillis),u={throttleEndTimeMillis:Date.now()+l,backoffCount:n+1};return s.setThrottleMetadata(o,u),at.debug(`Calling attemptFetch again in ${l} millis`),dt(e,u,i,s)}}class ht{constructor(){this.listeners=[]}addEventListener(e){this.listeners.push(e)}abort(){this.listeners.forEach((e=>e()))}}let pt,gt;async function ft(e,t,n,i,s,a,r){var o;const c=ut(e);c.then((t=>{n[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&at.warn(`The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((e=>at.error(e))),t.push(c);const l=async function(){var e;if(!p())return at.warn(ot.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await g()}catch(t){return at.warn(ot.create("indexeddb-unavailable",{errorInfo:null===(e=t)||void 0===e?void 0:e.toString()}).message),!1}return!0}().then((e=>e?i.getId():void 0)),[u,d]=await Promise.all([c,l]);(function(e){const t=window.document.getElementsByTagName("script");for(const n of Object.values(t))if(n.src&&n.src.includes(st)&&n.src.includes(e))return n;return null})(a)||function(e,t){const n=document.createElement("script");n.src=`${st}?l=${e}&id=${t}`,n.async=!0,document.head.appendChild(n)}(a,u.measurementId),gt&&(s("consent","default",gt),gt=void 0),s("js",new Date);const h=null!==(o=null==r?void 0:r.config)&&void 0!==o?o:{};return h.origin="firebase",h.update=!0,null!=d&&(h.firebase_id=d),s("config",u.measurementId,h),pt&&(s("set",pt),pt=void 0),u.measurementId}class mt{constructor(e){this.app=e}_delete(){return delete wt[this.app.options.appId],Promise.resolve()}}let wt={},vt=[];const bt={};let yt,It,St="dataLayer",Ct=!1;function kt(e,t,n){!function(){const e=[];if(function(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}()&&e.push("This is a browser extension environment."),"undefined"!=typeof navigator&&navigator.cookieEnabled||e.push("Cookies are not available."),e.length>0){const t=e.map(((e,t)=>`(${t+1}) ${e}`)).join(" "),n=ot.create("invalid-analytics-context",{errorInfo:t});at.warn(n.message)}}();const i=e.options.appId;if(!i)throw ot.create("no-app-id");if(!e.options.apiKey){if(!e.options.measurementId)throw ot.create("no-api-key");at.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=wt[i])throw ot.create("already-exists",{id:i});if(!Ct){!function(e){let t=[];Array.isArray(window.dataLayer)?t=window.dataLayer:window.dataLayer=t}();const{wrappedGtag:e,gtagCore:t}=function(e,t,n,i,s){let a=function(...e){window.dataLayer.push(arguments)};return window.gtag&&"function"==typeof window.gtag&&(a=window.gtag),window.gtag=function(e,t,n,i){return async function(s,a,r){try{"event"===s?await async function(e,t,n,i,s){try{let a=[];if(s&&s.send_to){let e=s.send_to;Array.isArray(e)||(e=[e]);const i=await rt(n);for(const n of e){const e=i.find((e=>e.measurementId===n)),s=e&&t[e.appId];if(!s){a=[];break}a.push(s)}}0===a.length&&(a=Object.values(t)),await Promise.all(a),e("event",i,s||{})}catch(e){at.error(e)}}(e,t,n,a,r):"config"===s?await async function(e,t,n,i,s,a){const r=i[s];try{if(r)await t[r];else{const e=(await rt(n)).find((e=>e.measurementId===s));e&&await t[e.appId]}}catch(e){at.error(e)}e("config",s,a)}(e,t,n,i,a,r):"consent"===s?e("consent","update",r):e("set",a)}catch(e){at.error(e)}}}(a,e,t,n),{gtagCore:a,wrappedGtag:window.gtag}}(wt,vt,bt);It=e,yt=t,Ct=!0}return wt[i]=ft(e,vt,bt,t,yt,St,n),new mt(e)}function Et(e,t,n,i){e=C(e),async function(e,t,n,i,s){if(s&&s.global)e("event",n,i);else{const s=await t;e("event",n,Object.assign(Object.assign({},i),{send_to:s}))}}(It,wt[e.app.options.appId],t,n,i).catch((e=>at.error(e)))}const Bt="@firebase/analytics",At="0.8.3";var Tt,Lt,Dt,_t,Nt,Pt;function xt(e){return e&&""!==e&&e.includes("-")?e.split("-")[0]:"NotAvailable"}function Mt(e){return e&&""!==e&&e.includes("-")?e.split("-")[1]:"NotAvailable"}function Rt(e,t,n){var i=e.answers[t-1],s=null,a=null;"correct"in e&&null!=e.correct&&(s=e.correct==i.answerName),"bucket"in e&&(a=e.bucket);var r="user "+Tt+" answered "+e.qName+" with "+i.answerName;r+=", all answers were [";var o="";for(var c in e.answers)r+=e.answers[c].answerName+",",o+=e.answers[c].answerName+",";r+="] ",r+=s,r+=a,console.log(r),Et(Nt,"answered",{type:"answered",clUserId:Tt,userSource:Lt,latLong:jt(Dt,_t),app:Mt(Pt),lang:xt(Pt),dt:n,question_number:e.qNumber,target:e.qTarget,question:e.promptText,selected_answer:i.answerName,iscorrect:s,options:o,bucket:a})}function Ot(e,t){var n=e.bucketID,i=e.numTried,s=e.numCorrect,a="user "+Tt+" finished the bucket "+n;console.log(a),Et(Nt,"bucketCompleted",{type:"bucketCompleted",clUserId:Tt,userSource:Lt,latLong:jt(Dt,_t),app:Mt(Pt),lang:xt(Pt),bucketNumber:n,numberTriedInBucket:i,numberCorrectInBucket:s,passedBucket:t})}function Ft(e=null){let t="user "+Tt+" finished the assessment";console.log(t);let n=function(e){let t=0;for(const n in e){const i=e[n];i.tested&&!i.passed&&(0==t||i.bucketID<t)&&(t=i.bucketID)}return t}(e),i=function(e){let t=0;for(const n in e){const i=e[n];i.tested&&i.passed&&(0==t||i.bucketID>t)&&(t=i.bucketID)}return t}(e);0==n&&(n=i);let s=function(e,t){console.log("Calculating score"),console.log(e);let n=0;console.log("Basal Bucket ID: "+t);let i=0;for(const n in e){const s=e[n];if(s.bucketID==t){i=s.numCorrect;break}}return n=0|Math.round(100*(t-1)+i/5*100),n}(e,n);const a=100*e.length;console.log("Sending completed event"),console.log("Score: "+s),console.log("Max Score: "+a),console.log("Basal Bucket: "+n),console.log("Ceiling Bucket: "+i),Et(Nt,"completed",{type:"completed",clUserId:Tt,userSource:Lt,app:Mt(Pt),lang:xt(Pt),latLong:jt(Dt,_t),score:s,maxScore:a,basalBucket:n,ceilingBucket:i})}function jt(e,t){return e+","+t}ce(new k(it,((e,{options:t})=>kt(e.getProvider("app").getImmediate(),e.getProvider("installations-internal").getImmediate(),t)),"PUBLIC")),ce(new k("analytics-internal",(function(e){try{const t=e.getProvider(it).getImmediate();return{logEvent:(e,n,i)=>Et(t,e,n,i)}}catch(e){throw ot.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),pe(Bt,At),pe(Bt,At,"esm2017");class Ut{onEnd(){Ft(),l.ShowEnd(),this.app.unityBridge.SendClose()}}var $t;class qt extends Ut{constructor(e,t){super(),this.startSurvey=()=>{l.ReadyForNext(this.getNextQuestion())},this.onQuestionEnd=()=>{l.SetFeedbackVisibile(!1),this.currentQuestionIndex+=1,setTimeout((()=>{this.HasQuestionsLeft()?l.ReadyForNext(this.getNextQuestion()):(console.log("There are no questions left."),this.onEnd())}),500)},this.TryAnswer=(e,t)=>{Rt(this.questionsData[this.currentQuestionIndex],e,t),l.SetFeedbackVisibile(!0),l.AddStar(),setTimeout((()=>{this.onQuestionEnd()}),2e3)},this.buildQuestionList=()=>function(e){return i(this,void 0,void 0,(function*(){return a(e).then((e=>e.questions))}))}(this.app.dataURL),console.log("Survey initialized"),this.dataURL=e,this.unityBridge=t,this.currentQuestionIndex=0,l.SetButtonPressAction(this.TryAnswer),l.SetStartAction(this.startSurvey)}Run(e){return t=this,n=void 0,s=function*(){this.app=e,this.buildQuestionList().then((e=>{this.questionsData=e,r.PrepareAudioAndImagesForSurvey(this.questionsData,this.app.GetDataURL()),this.unityBridge.SendLoaded()}))},new((i=void 0)||(i=Promise))((function(e,a){function r(e){try{c(s.next(e))}catch(e){a(e)}}function o(e){try{c(s.throw(e))}catch(e){a(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(r,o)}c((s=s.apply(t,n||[])).next())}));var t,n,i,s}HasQuestionsLeft(){return this.currentQuestionIndex<=this.questionsData.length-1}getNextQuestion(){return this.questionsData[this.currentQuestionIndex]}}function Ht(e,t,n){if(t>n)return null;var i;i=parseInt((t+n)/2+""),console.log("Middle bucket: ",i,"Start: ",t,"End: ",n,"Array: ",e.length);const s={data:e[i],left:null,right:null};return s.left=Ht(e,t,i-1),s.right=Ht(e,i+1,n),s}!function(e){e[e.BinarySearch=0]="BinarySearch",e[e.LinearSearchUp=1]="LinearSearchUp",e[e.LinearSearchDown=2]="LinearSearchDown"}($t||($t={}));class Wt extends Ut{constructor(e,t){super(),this.startAssessment=()=>{l.ReadyForNext(this.getNextQuestion())},this.buildBuckets=()=>{var e=function(e){return i(this,void 0,void 0,(function*(){return a(e).then((e=>e.buckets))}))}(this.app.GetDataURL()).then((e=>{this.buckets=e,this.numBuckets=e.length,console.log("buckets: "+this.buckets),this.bucketArray=Array.from(Array(this.numBuckets),((e,t)=>t+1)),console.log("empty array "+this.bucketArray);var t=Ht(this.buckets,0,this.numBuckets);console.log(t),this.basalBucket=this.numBuckets+1,this.ceilingBucket=-1,this.currentNode=t,this.tryMoveBucket(t.data,!1)}));return e},this.initBucket=e=>{this.currentBucket=e,this.currentBucket.usedItems=[],this.currentBucket.numTried=0,this.currentBucket.numCorrect=0,this.currentBucket.numConsecutiveWrong=0,this.currentBucket.tested=!0,this.currentBucket.passed=!1},this.TryAnswer=(e,t)=>{Rt(this.currentQuestion,e,t),this.currentBucket.numTried+=1,this.currentQuestion.answers[e-1].answerName==this.currentQuestion.correct?(this.currentBucket.numCorrect+=1,this.currentBucket.numConsecutiveWrong=0,console.log("Answered correctly")):(this.currentBucket.numConsecutiveWrong+=1,console.log("Answered incorrectly, "+this.currentBucket.numConsecutiveWrong)),l.AddStar(),l.SetFeedbackVisibile(!0),setTimeout((()=>{console.log("Completed first Timeout"),this.onQuestionEnd()}),2e3)},this.onQuestionEnd=()=>{let e=this.HasQuestionsLeft()?500:4e3;const t=()=>{l.SetFeedbackVisibile(!1),l.ChangeStarImageAfterAnimation(),this.HasQuestionsLeft()?l.ReadyForNext(this.getNextQuestion()):(console.log("No questions left"),this.onEnd())};new Promise((t=>{setTimeout((()=>{t()}),e)})).then((()=>{t()}))},this.getNextQuestion=()=>{var e,t,n,i;do{e=o(this.currentBucket.items)}while(this.currentBucket.usedItems.includes(e));this.currentBucket.usedItems.push(e);do{t=o(this.currentBucket.items)}while(e==t);do{n=o(this.currentBucket.items)}while(e==n||t==n);do{i=o(this.currentBucket.items)}while(e==i||t==i||n==i);var s=[e,t,n,i];c(s);var a={qName:"question-"+this.questionNumber+"-"+e.itemName,qNumber:this.questionNumber,qTarget:e.itemName,promptText:"",bucket:this.currentBucket.bucketID,promptAudio:e.itemName,correct:e.itemText,answers:[{answerName:s[0].itemName,answerText:s[0].itemText},{answerName:s[1].itemName,answerText:s[1].itemText},{answerName:s[2].itemName,answerText:s[2].itemText},{answerName:s[3].itemName,answerText:s[3].itemText}]};return this.currentQuestion=a,this.questionNumber+=1,a},this.tryMoveBucket=(e,t)=>{null!=this.currentBucket&&(this.currentBucket.passed=t,Ot(this.currentBucket,t)),console.log("new  bucket is "+e.bucketID),r.PreloadBucket(e,this.app.GetDataURL()),this.initBucket(e)},this.HasQuestionsLeft=()=>{var e=!0;return this.currentBucket.numCorrect>=4&&(console.log("passed this bucket "+this.currentBucket.bucketID),this.currentBucket.bucketID>=this.numBuckets?(console.log("passed highest bucket"),this.currentBucket.passed=!0,Ot(this.currentBucket,!0),l.ProgressChest(),e=!1):(console.log("moving up bucket"),null!=this.currentNode.right?(l.ProgressChest(),console.log("moving to right node"),this.currentNode=this.currentNode.right,this.tryMoveBucket(this.currentNode.data,!0)):(console.log("reached root node"),this.currentBucket.passed=!0,Ot(this.currentBucket,!0),l.ProgressChest(),e=!1))),(this.currentBucket.numConsecutiveWrong>=2||this.currentBucket.numTried>=5)&&(console.log("failed this bucket "+this.currentBucket.bucketID),this.currentBucket.bucketID<this.basalBucket&&(this.basalBucket=this.currentBucket.bucketID),this.currentBucket.bucketID<=1?(console.log("failed lowest bucket"),e=!1,this.currentBucket.passed=!1,Ot(this.currentBucket,!1)):(console.log("moving down bucket"),null!=this.currentNode.left?(console.log("moving to left node"),this.currentNode=this.currentNode.left,this.tryMoveBucket(this.currentNode.data,!1)):(console.log("reached root node"),e=!1,this.currentBucket.passed=!1,Ot(this.currentBucket,!1)))),e},this.dataURL=e,this.unityBridge=t,this.questionNumber=0,console.log("app initialized"),l.SetButtonPressAction(this.TryAnswer),l.SetStartAction(this.startAssessment)}Run(e){this.app=e,this.buildBuckets().then((e=>{console.log(this.currentBucket),this.unityBridge.SendLoaded()}))}onEnd(){Ft(this.buckets),l.ShowEnd(),this.app.unityBridge.SendClose()}}class zt{constructor(){"undefined"!=typeof Unity?this.unityReference=Unity:this.unityReference=null}SendMessage(e){null!==this.unityReference&&this.unityReference.call(e)}SendLoaded(){null!==this.unityReference?this.unityReference.call("loaded"):console.log("would call Unity loaded now")}SendClose(){null!==this.unityReference?this.unityReference.call("close"):console.log("would close Unity now")}}pe("firebase","9.12.1","app");try{self["workbox:window:7.0.0"]&&_()}catch(Vt){}function Vt(e,t){return new Promise((function(n){var i=new MessageChannel;i.port1.onmessage=function(e){n(e.data)},e.postMessage(t,[i.port2])}))}function Qt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function Gt(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Qt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Qt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0;return function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=e[Symbol.iterator]()).next.bind(n)}try{self["workbox:core:7.0.0"]&&_()}catch(Vt){}var Kt=function(){var e=this;this.promise=new Promise((function(t,n){e.resolve=t,e.reject=n}))};function Jt(e,t){var n=location.href;return new URL(e,n).href===new URL(t,n).href}var Yt=function(e,t){this.type=e,Object.assign(this,t)};function Zt(e,t,n){return n?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function Xt(){}var en={type:"SKIP_WAITING"};function tn(e,t){if(!t)return e&&e.then?e.then(Xt):Promise.resolve()}var nn=function(e){var t,n;function i(t,n){var i,s;return void 0===n&&(n={}),(i=e.call(this)||this).nn={},i.tn=0,i.rn=new Kt,i.en=new Kt,i.on=new Kt,i.un=0,i.an=new Set,i.cn=function(){var e=i.fn,t=e.installing;i.tn>0||!Jt(t.scriptURL,i.sn.toString())||performance.now()>i.un+6e4?(i.vn=t,e.removeEventListener("updatefound",i.cn)):(i.hn=t,i.an.add(t),i.rn.resolve(t)),++i.tn,t.addEventListener("statechange",i.ln)},i.ln=function(e){var t=i.fn,n=e.target,s=n.state,a=n===i.vn,r={sw:n,isExternal:a,originalEvent:e};!a&&i.mn&&(r.isUpdate=!0),i.dispatchEvent(new Yt(s,r)),"installed"===s?i.wn=self.setTimeout((function(){"installed"===s&&t.waiting===n&&i.dispatchEvent(new Yt("waiting",r))}),200):"activating"===s&&(clearTimeout(i.wn),a||i.en.resolve(n))},i.dn=function(e){var t=i.hn,n=t!==navigator.serviceWorker.controller;i.dispatchEvent(new Yt("controlling",{isExternal:n,originalEvent:e,sw:t,isUpdate:i.mn})),n||i.on.resolve(t)},i.gn=(s=function(e){var t=e.data,n=e.ports,s=e.source;return Zt(i.getSW(),(function(){i.an.has(s)&&i.dispatchEvent(new Yt("message",{data:t,originalEvent:e,ports:n,sw:s}))}))},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];try{return Promise.resolve(s.apply(this,e))}catch(e){return Promise.reject(e)}}),i.sn=t,i.nn=n,navigator.serviceWorker.addEventListener("message",i.gn),i}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var s,a=i.prototype;return a.register=function(e){var t=(void 0===e?{}:e).immediate,n=void 0!==t&&t;try{var i=this;return function(e,t){var n=e();return n&&n.then?n.then(t):t()}((function(){if(!n&&"complete"!==document.readyState)return tn(new Promise((function(e){return window.addEventListener("load",e)})))}),(function(){return i.mn=Boolean(navigator.serviceWorker.controller),i.yn=i.pn(),Zt(i.bn(),(function(e){i.fn=e,i.yn&&(i.hn=i.yn,i.en.resolve(i.yn),i.on.resolve(i.yn),i.yn.addEventListener("statechange",i.ln,{once:!0}));var t=i.fn.waiting;return t&&Jt(t.scriptURL,i.sn.toString())&&(i.hn=t,Promise.resolve().then((function(){i.dispatchEvent(new Yt("waiting",{sw:t,wasWaitingBeforeRegister:!0}))})).then((function(){}))),i.hn&&(i.rn.resolve(i.hn),i.an.add(i.hn)),i.fn.addEventListener("updatefound",i.cn),navigator.serviceWorker.addEventListener("controllerchange",i.dn),i.fn}))}))}catch(e){return Promise.reject(e)}},a.update=function(){try{return this.fn?tn(this.fn.update()):void 0}catch(e){return Promise.reject(e)}},a.getSW=function(){return void 0!==this.hn?Promise.resolve(this.hn):this.rn.promise},a.messageSW=function(e){try{return Zt(this.getSW(),(function(t){return Vt(t,e)}))}catch(e){return Promise.reject(e)}},a.messageSkipWaiting=function(){this.fn&&this.fn.waiting&&Vt(this.fn.waiting,en)},a.pn=function(){var e=navigator.serviceWorker.controller;return e&&Jt(e.scriptURL,this.sn.toString())?e:void 0},a.bn=function(){try{var e=this;return function(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}((function(){return Zt(navigator.serviceWorker.register(e.sn,e.nn),(function(t){return e.un=performance.now(),t}))}),(function(e){throw e}))}catch(e){return Promise.reject(e)}},(s=[{key:"active",get:function(){return this.en.promise}},{key:"controlling",get:function(){return this.on.promise}}])&&function(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}(i.prototype,s),i}(function(){function e(){this.Pn=new Map}var t=e.prototype;return t.addEventListener=function(e,t){this.Sn(e).add(t)},t.removeEventListener=function(e,t){this.Sn(e).delete(t)},t.dispatchEvent=function(e){e.target=this;for(var t,n=Gt(this.Sn(e.type));!(t=n()).done;)(0,t.value)(e)},t.Sn=function(e){return this.Pn.has(e)||this.Pn.set(e,new Set),this.Pn.get(e)},e}());var sn=function(e,t,n,i){return new(n||(n=Promise))((function(s,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function o(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,o)}c((i=i.apply(e,t||[])).next())}))};let an=document.getElementById("loadingScreen");const rn=new BroadcastChannel("as-message-channel");function on(e){"Loading"==e.data.msg&&function(e,t){let n=document.getElementById("progressBar");t<100?n.style.width=t+"%":t>=100&&(an.style.display="none",l.SetContentLoaded(!0),localStorage.setItem(e.data.data.bookName,"true"),function(e){if(window.Android){let t=null!==localStorage.getItem(e);window.Android.cachedStatus(t)}}(e.data.data.bookName))}(e,parseInt(e.data.data.progress)),"UpdateFound"==e.data.msg&&(console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>.,update Found"),function(){let e="Update Found.\nPlease accept the update by pressing Ok.";1==confirm(e)?window.location.reload():e="Update will happen on the next launch."}())}rn.addEventListener("message",on);const cn=new class{constructor(){this.lang="english",this.unityBridge=new zt,console.log("Initializing app..."),this.dataURL=t(),this.cacheModel=new class{constructor(e,t,n){this.appName=e,this.contentFilePath=t,this.audioVisualResources=n}setAppName(e){this.appName=e}setContentFilePath(e){this.contentFilePath=e}setAudioVisualResources(e){this.audioVisualResources=e}addItemToAudioVisualResources(e){this.audioVisualResources.has(e)||this.audioVisualResources.add(e)}}(this.dataURL,this.dataURL,new Set);const e=function(e=function(e="[DEFAULT]"){const t=ae.get(e);if(!t&&e===ie)return he();if(!t)throw ue.create("no-app",{appName:e});return t}()){const t=le(e=C(e),it);return t.isInitialized()?t.getImmediate():function(e,t={}){const n=le(e,it);if(n.isInitialized()){const e=n.getImmediate();if(y(t,n.getOptions()))return e;throw ot.create("already-initialized")}return n.initialize({options:t})}(e)}(he({apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:7b1b1181864d28b49de10c",measurementId:"G-FF1159TGCF"}));this.analytics=e,Et(e,"notification_received"),Et(e,"test initialization event",{}),console.log("firebase initialized")}spinUp(){return sn(this,void 0,void 0,(function*(){window.addEventListener("load",(()=>{console.log("Window Loaded!"),(()=>{sn(this,void 0,void 0,(function*(){yield function(e){return i(this,void 0,void 0,(function*(){return a(e).then((e=>e))}))}(this.dataURL).then((e=>{console.log("Assessment/Survey v0.2.8 initializing!"),console.log("App data loaded!"),console.log(e),this.cacheModel.setContentFilePath(s(this.dataURL)),l.SetFeedbackText(e.feedbackText);let t=e.appType;if("survey"==t)this.game=new qt(this.dataURL,this.unityBridge);else if("assessment"==t){let t=e.buckets;for(let n=0;n<t.length;n++)for(let i=0;i<t[n].items.length;i++){let s;s=e.quizName.includes("Luganda")?"/audio/"+this.dataURL+"/"+t[n].items[i].itemName.toLowerCase().trim()+".mp3":"/audio/"+this.dataURL+"/"+t[n].items[i].itemName.trim()+".mp3",this.cacheModel.addItemToAudioVisualResources(s)}this.cacheModel.addItemToAudioVisualResources("/audio/"+this.dataURL+"/answer_feedback.mp3"),this.game=new Wt(this.dataURL,this.unityBridge)}var i,a,r,o,c;this.game.unityBridge=this.unityBridge,null==(r=n().get("cr_user_id"))&&(console.log("no uuid provided"),r="WebUserNoID"),i=r,a=function(){var e=n().get("userSource");return null==e&&(console.log("no user source provided"),e="WebUserNoSource"),e}(),Tt=i,Lt=a,o=this.analytics,c=this.dataURL,Nt=o,Pt=c,function(){console.log("starting to get location"),fetch("https://ipinfo.io/json?token=b6268727178610").then((e=>{if(console.log("got location response"),!e.ok)throw Error(e.statusText);return e.json()})).then((e=>{console.log(e);var t,n=e.loc.split(","),i=parseFloat(n[0]).toFixed(2),s=parseFloat(n[1]).toFixed(1);return n=[],t="Sending User coordinates: "+Tt+" : "+(Dt=i)+", "+(_t=s),console.log(t),Et(Nt,"user_location",{user:Tt,lang:xt(Pt),app:Mt(Pt),latlong:jt(Dt,_t)}),console.log("INITIALIZED EVENT SENT"),console.log("App Language: "+xt(Pt)),console.log("App Type: "+Mt(Pt)),Et(Nt,"initialized",{type:"initialized",clUserId:Tt,userSource:Lt,latLong:jt(Dt,_t),app:Mt(Pt),lang:xt(Pt)}),{}})).catch((e=>{console.warn(`location failed to update! encountered error ${e.msg}`)}));var e="user "+Tt+" opened the assessment";console.log(e),Et(Nt,"opened",{})}(),this.game.Run(this)})),yield this.registerServiceWorker(this.game)}))})()}))}))}registerServiceWorker(e){return sn(this,void 0,void 0,(function*(){console.log("Registering service worker..."),"serviceWorker"in navigator?(new nn("./sw.js",{}).register().then((e=>{console.log("Service worker registered!"),this.handleServiceWorkerRegistation(e)})).catch((e=>{console.log("Service worker registration failed: "+e)})),navigator.serviceWorker.addEventListener("message",on),yield navigator.serviceWorker.ready,console.log("Cache Model: "),console.log(this.cacheModel),null==localStorage.getItem(this.cacheModel.appName)?(console.log("WE DONT HAVE THIS ASSESSMENT< CACHING IT!"),an.style.display="flex",rn.postMessage({command:"Cache",data:{appData:this.cacheModel}})):an.style.display="none",rn.onmessage=e=>{console.log(e.data.command+" received from service worker!"),"Activated"==e.data.command&&null==localStorage.getItem(this.cacheModel.appName)&&rn.postMessage({command:"Cache",data:{appData:this.cacheModel}})}):console.warn("Service workers are not supported in this browser.")}))}handleServiceWorkerRegistation(e){var t;try{null===(t=null==e?void 0:e.installing)||void 0===t||t.postMessage({type:"Registartion",value:this.lang})}catch(e){console.log("Service worker registration failed: "+e)}}GetDataURL(){return this.dataURL}};cn.spinUp()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,