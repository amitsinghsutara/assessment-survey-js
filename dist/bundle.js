/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={};function t(){var e=n().get("data");return null==e&&(console.log("default data file"),e="zulu-lettersounds"),e}function n(){const e=window.location.search;return new URLSearchParams(e)}e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();var i=function(e,t,n,i){return new(n||(n=Promise))((function(r,a){function o(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((i=i.apply(e,t||[])).next())}))},r=[],a={},o={},s="",c=new Audio;c.src="dist/audio/Correct.wav";var u=new Audio;function l(e){return i(this,void 0,void 0,(function*(){console.log("looking for "+e);var t=e,n=new Image;n.src=t,o[t]=n}))}function d(e){return i(this,void 0,void 0,(function*(){console.log("looking for "+e),e.includes(".wav")?e=e.replace(".wav",".mp3"):e.includes(".mp3")||(e+=".mp3"),console.log("Filtered: "+e);let t=new Audio;t.src="audio/"+s+"/"+e,a[e]=t,console.log(t.src)}))}function h(e,t){return i(this,void 0,void 0,(function*(){for(var n in s=t,u.src="audio/"+s+"/answer_feedback.mp3",e.items)d(e.items[n].itemName)}))}function f(e,t){console.log("trying to play "+e),e.includes(".mp3")?".mp3"!=e.slice(-4)&&(e+=".mp3"):e+=".mp3",console.log(a),void 0!==t&&a[e].addEventListener("ended",(()=>{t()})),e in a&&(console.log(a[e]),a[e].play())}function p(e){return o[e]}function g(e){return e[Math.floor(Math.random()*e.length)]}function m(e){for(let t=e.length-1;t>0;t--){const n=Math.floor(Math.random()*(t+1));[e[t],e[n]]=[e[n],e[t]]}}const v=document.getElementById("landWrap"),y=document.getElementById("gameWrap"),w=document.getElementById("endWrap"),b=document.getElementById("starWrapper"),I=document.getElementById("qWrap"),E=document.getElementById("pbutton"),k=document.getElementById("feedbackWrap"),S=document.getElementById("aWrap"),B=document.getElementById("answerButton1"),C=document.getElementById("answerButton2"),D=document.getElementById("answerButton3"),T=document.getElementById("answerButton4"),L=document.getElementById("answerButton5"),A=document.getElementById("answerButton6");var N,M=null,x=!1,P=[],R=0;let O=!1;for(var j=0;j<20;j+=1){const e=document.createElement("img");e.src="img/star.png",e.id="star"+j,e.classList.add("topstarh"),b.appendChild(e),b.innerHTML+="",9==j&&(b.innerHTML+="<br>"),P.push(j)}m(P);const F=[B,C,D,T,L,A];var U,$,W=!0;function H(e){for(var t in console.log("ready for next!"),S.style.visibility="hidden",F)F[t].style.visibility="hidden";x=!1,M=e,I.innerHTML="",I.style.display="none",E.innerHTML="<button id='nextqButton'><img width='85px' height='85px' src='/img/sound-play-button.svg' type='image/svg+xml'> </img></button>",document.getElementById("nextqButton").addEventListener("click",(function(){!function(e){E.innerHTML="<button id='nextqButton'><img width='85px' height='85px' src='/img/sound-play-button.svg' type='image/svg+xml'> </img></button>",document.getElementById("nextqButton").addEventListener("click",(function(){console.log("next question button pressed"),console.log(e.promptAudio),"promptAudio"in e&&f(e.promptAudio,z)})),S.style.visibility="visible";let t="";if(I.innerHTML="",void 0===e&&(e=M),"promptImg"in e){var n=p(e.promptImg);I.appendChild(n)}for(var i in t+=e.promptText,t+="<BR>",I.innerHTML+=t,F)F[i].style.visibility="hidden"}(),f(e.promptAudio,z)}))}function z(){if(!x){var e=M;let i=0;for(var t in e.answers){F[i++].style.visibility="visible";let r=e.answers[t],a="";if("answerText"in r&&(a+=r.answerText),F[t].innerHTML=a,"answerImg"in r){var n=p(r.answerImg);F[t].appendChild(n)}}N=Date.now()}}function q(e){e?(k.classList.remove("hidden"),k.classList.add("visible"),u.play(),W=!1):(k.classList.remove("visible"),k.classList.add("hidden"),W=!0)}function V(){var e=document.getElementById("star"+P[R]);e.classList.add("topstarv"),e.classList.remove("topstarh"),R+=1}function Q(e){$=e}function G(e){U=e}function K(e){if(W){c.play();var t=Date.now()-N;console.log("answered in "+t),U(e,t)}}B.addEventListener("click",(function(){K(1)})),C.addEventListener("click",(function(){K(2)})),D.addEventListener("click",(function(){K(3)})),T.addEventListener("click",(function(){K(4)})),L.addEventListener("click",(function(){K(5)})),A.addEventListener("click",(function(){K(6)})),v.addEventListener("click",(function(){localStorage.getItem(t())&&(v.style.display="none",y.style.display="grid",w.style.display="none",Date.now(),$())})),w.addEventListener("click",(function(){v.style.display="flex",y.style.display="none",w.style.display="none"}));const J=function(e){const t=[];let n=0;for(let i=0;i<e.length;i++){let r=e.charCodeAt(i);r<128?t[n++]=r:r<2048?(t[n++]=r>>6|192,t[n++]=63&r|128):55296==(64512&r)&&i+1<e.length&&56320==(64512&e.charCodeAt(i+1))?(r=65536+((1023&r)<<10)+(1023&e.charCodeAt(++i)),t[n++]=r>>18|240,t[n++]=r>>12&63|128,t[n++]=r>>6&63|128,t[n++]=63&r|128):(t[n++]=r>>12|224,t[n++]=r>>6&63|128,t[n++]=63&r|128)}return t},Y={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[];for(let t=0;t<e.length;t+=3){const r=e[t],a=t+1<e.length,o=a?e[t+1]:0,s=t+2<e.length,c=s?e[t+2]:0,u=r>>2,l=(3&r)<<4|o>>4;let d=(15&o)<<2|c>>6,h=63&c;s||(h=64,a||(d=64)),i.push(n[u],n[l],n[d],n[h])}return i.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(J(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,i=0;for(;n<e.length;){const r=e[n++];if(r<128)t[i++]=String.fromCharCode(r);else if(r>191&&r<224){const a=e[n++];t[i++]=String.fromCharCode((31&r)<<6|63&a)}else if(r>239&&r<365){const a=((7&r)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[i++]=String.fromCharCode(55296+(a>>10)),t[i++]=String.fromCharCode(56320+(1023&a))}else{const a=e[n++],o=e[n++];t[i++]=String.fromCharCode((15&r)<<12|(63&a)<<6|63&o)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,i=[];for(let t=0;t<e.length;){const r=n[e.charAt(t++)],a=t<e.length?n[e.charAt(t)]:0;++t;const o=t<e.length?n[e.charAt(t)]:64;++t;const s=t<e.length?n[e.charAt(t)]:64;if(++t,null==r||null==a||null==o||null==s)throw Error();const c=r<<2|a>>4;if(i.push(c),64!==o){const e=a<<4&240|o>>2;if(i.push(e),64!==s){const e=o<<6&192|s;i.push(e)}}}return i},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},X=function(e){return function(e){const t=J(e);return Y.encodeByteArray(t,!0)}(e).replace(/\./g,"")};function Z(){return"object"==typeof indexedDB}function ee(){return new Promise(((e,t)=>{try{let n=!0;const i="validate-browser-context-for-indexeddb-analytics-module",r=self.indexedDB.open(i);r.onsuccess=()=>{r.result.close(),n||self.indexedDB.deleteDatabase(i),e(!0)},r.onupgradeneeded=()=>{n=!1},r.onerror=()=>{var e;t((null===(e=r.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}const te=()=>{try{return function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e.g)return e.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&function(e){try{return Y.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null}(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}};class ne{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}class ie extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,ie.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,re.prototype.create)}}class re{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},i=`${this.service}/${e}`,r=this.errors[e],a=r?function(e,t){return e.replace(ae,((e,n)=>{const i=t[n];return null!=i?String(i):`<${n}?>`}))}(r,n):"Error",o=`${this.serviceName}: ${a} (${i}).`;return new ie(i,o,n)}}const ae=/\{\$([^}]+)}/g;function oe(e,t){if(e===t)return!0;const n=Object.keys(e),i=Object.keys(t);for(const r of n){if(!i.includes(r))return!1;const n=e[r],a=t[r];if(se(n)&&se(a)){if(!oe(n,a))return!1}else if(n!==a)return!1}for(const e of i)if(!n.includes(e))return!1;return!0}function se(e){return null!==e&&"object"==typeof e}function ce(e,t=1e3,n=2){const i=t*Math.pow(n,e),r=Math.round(.5*i*(Math.random()-.5)*2);return Math.min(144e5,i+r)}function ue(e){return e&&e._delegate?e._delegate:e}class le{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const de="[DEFAULT]";class he{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new ne;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),i=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(i)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(i)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:de})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e="[DEFAULT]"){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e="[DEFAULT]"){return this.instances.has(e)}getOptions(e="[DEFAULT]"){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const i=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(i);return i}onInit(e,t){var n;const i=this.normalizeInstanceIdentifier(t),r=null!==(n=this.onInitCallbacks.get(i))&&void 0!==n?n:new Set;r.add(e),this.onInitCallbacks.set(i,r);const a=this.instances.get(i);return a&&e(a,i),()=>{r.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const i of n)try{i(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(i=e,i===de?void 0:i),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var i;return n||null}normalizeInstanceIdentifier(e="[DEFAULT]"){return this.component?this.component.multipleInstances?e:de:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class fe{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new he(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}const pe=[];var ge;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(ge||(ge={}));const me={debug:ge.DEBUG,verbose:ge.VERBOSE,info:ge.INFO,warn:ge.WARN,error:ge.ERROR,silent:ge.SILENT},ve=ge.INFO,ye={[ge.DEBUG]:"log",[ge.VERBOSE]:"log",[ge.INFO]:"info",[ge.WARN]:"warn",[ge.ERROR]:"error"},we=(e,t,...n)=>{if(t<e.logLevel)return;const i=(new Date).toISOString(),r=ye[t];if(!r)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[r](`[${i}]  ${e.name}:`,...n)};class be{constructor(e){this.name=e,this._logLevel=ve,this._logHandler=we,this._userLogHandler=null,pe.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in ge))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?me[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,ge.DEBUG,...e),this._logHandler(this,ge.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,ge.VERBOSE,...e),this._logHandler(this,ge.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,ge.INFO,...e),this._logHandler(this,ge.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,ge.WARN,...e),this._logHandler(this,ge.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,ge.ERROR,...e),this._logHandler(this,ge.ERROR,...e)}}let Ie,Ee;const ke=new WeakMap,Se=new WeakMap,Be=new WeakMap,Ce=new WeakMap,De=new WeakMap;let Te={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return Se.get(e);if("objectStoreNames"===t)return e.objectStoreNames||Be.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return Le(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function _e(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(Ee||(Ee=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(Ae(this),e),Le(ke.get(this))}:function(...e){return Le(t.apply(Ae(this),e))}:function(e,...n){const i=t.call(Ae(this),e,...n);return Be.set(i,e.sort?e.sort():[e]),Le(i)}:(e instanceof IDBTransaction&&function(e){if(Se.has(e))return;const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("complete",r),e.removeEventListener("error",a),e.removeEventListener("abort",a)},r=()=>{t(),i()},a=()=>{n(e.error||new DOMException("AbortError","AbortError")),i()};e.addEventListener("complete",r),e.addEventListener("error",a),e.addEventListener("abort",a)}));Se.set(e,t)}(e),n=e,(Ie||(Ie=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(e,Te):e);var t,n}function Le(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("success",r),e.removeEventListener("error",a)},r=()=>{t(Le(e.result)),i()},a=()=>{n(e.error),i()};e.addEventListener("success",r),e.addEventListener("error",a)}));return t.then((t=>{t instanceof IDBCursor&&ke.set(t,e)})).catch((()=>{})),De.set(t,e),t}(e);if(Ce.has(e))return Ce.get(e);const t=_e(e);return t!==e&&(Ce.set(e,t),De.set(t,e)),t}const Ae=e=>De.get(e);function Ne(e,t,{blocked:n,upgrade:i,blocking:r,terminated:a}={}){const o=indexedDB.open(e,t),s=Le(o);return i&&o.addEventListener("upgradeneeded",(e=>{i(Le(o.result),e.oldVersion,e.newVersion,Le(o.transaction))})),n&&o.addEventListener("blocked",(()=>n())),s.then((e=>{a&&e.addEventListener("close",(()=>a())),r&&e.addEventListener("versionchange",(()=>r()))})).catch((()=>{})),s}const Me=["get","getKey","getAll","getAllKeys","count"],xe=["put","add","delete","clear"],Pe=new Map;function Re(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(Pe.get(t))return Pe.get(t);const n=t.replace(/FromIndex$/,""),i=t!==n,r=xe.includes(n);if(!(n in(i?IDBIndex:IDBObjectStore).prototype)||!r&&!Me.includes(n))return;const a=async function(e,...t){const a=this.transaction(e,r?"readwrite":"readonly");let o=a.store;return i&&(o=o.index(t.shift())),(await Promise.all([o[n](...t),r&&a.done]))[0]};return Pe.set(t,a),a}var Oe;Oe=Te,Te={...Oe,get:(e,t,n)=>Re(e,t)||Oe.get(e,t,n),has:(e,t)=>!!Re(e,t)||Oe.has(e,t)};class je{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const Fe="@firebase/app",Ue="0.8.2",$e=new be("@firebase/app"),We="[DEFAULT]",He={[Fe]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},ze=new Map,qe=new Map;function Ve(e,t){try{e.container.addComponent(t)}catch(n){$e.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function Qe(e){const t=e.name;if(qe.has(t))return $e.debug(`There were multiple attempts to register component ${t}.`),!1;qe.set(t,e);for(const t of ze.values())Ve(t,e);return!0}function Ge(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}const Ke=new re("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."});class Je{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new le("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw Ke.create("app-deleted",{appName:this._name})}}function Ye(e,t={}){let n=e;"object"!=typeof t&&(t={name:t});const i=Object.assign({name:We,automaticDataCollectionEnabled:!1},t),r=i.name;if("string"!=typeof r||!r)throw Ke.create("bad-app-name",{appName:String(r)});var a;if(n||(n=null===(a=te())||void 0===a?void 0:a.config),!n)throw Ke.create("no-options");const o=ze.get(r);if(o){if(oe(n,o.options)&&oe(i,o.config))return o;throw Ke.create("duplicate-app",{appName:r})}const s=new fe(r);for(const e of qe.values())s.addComponent(e);const c=new Je(n,i,s);return ze.set(r,c),c}function Xe(e,t,n){var i;let r=null!==(i=He[e])&&void 0!==i?i:e;n&&(r+=`-${n}`);const a=r.match(/\s|\//),o=t.match(/\s|\//);if(a||o){const e=[`Unable to register library "${r}" with version "${t}":`];return a&&e.push(`library name "${r}" contains illegal characters (whitespace or "/")`),a&&o&&e.push("and"),o&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void $e.warn(e.join(" "))}Qe(new le(`${r}-version`,(()=>({library:r,version:t})),"VERSION"))}const Ze="firebase-heartbeat-store";let et=null;function tt(){return et||(et=Ne("firebase-heartbeat-database",1,{upgrade:(e,t)=>{0===t&&e.createObjectStore(Ze)}}).catch((e=>{throw Ke.create("idb-open",{originalErrorMessage:e.message})}))),et}async function nt(e,t){var n;try{const n=(await tt()).transaction(Ze,"readwrite"),i=n.objectStore(Ze);return await i.put(t,it(e)),n.done}catch(e){if(e instanceof ie)$e.warn(e.message);else{const t=Ke.create("idb-set",{originalErrorMessage:null===(n=e)||void 0===n?void 0:n.message});$e.warn(t.message)}}}function it(e){return`${e.name}!${e.options.appId}`}class rt{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new ot(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=at();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=at(),{heartbeatsToSend:t,unsentEntries:n}=function(e,t=1024){const n=[];let i=e.slice();for(const r of e){const e=n.find((e=>e.agent===r.agent));if(e){if(e.dates.push(r.date),st(n)>t){e.dates.pop();break}}else if(n.push({agent:r.agent,dates:[r.date]}),st(n)>t){n.pop();break}i=i.slice(1)}return{heartbeatsToSend:n,unsentEntries:i}}(this._heartbeatsCache.heartbeats),i=X(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,n.length>0?(this._heartbeatsCache.heartbeats=n,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),i}}function at(){return(new Date).toISOString().substring(0,10)}class ot{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!Z()&&ee().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const e=await async function(e){var t;try{return(await tt()).transaction(Ze).objectStore(Ze).get(it(e))}catch(e){if(e instanceof ie)$e.warn(e.message);else{const n=Ke.create("idb-get",{originalErrorMessage:null===(t=e)||void 0===t?void 0:t.message});$e.warn(n.message)}}}(this.app);return e||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return nt(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return nt(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function st(e){return X(JSON.stringify({version:2,heartbeats:e})).length}Qe(new le("platform-logger",(e=>new je(e)),"PRIVATE")),Qe(new le("heartbeat",(e=>new rt(e)),"PRIVATE")),Xe(Fe,Ue,""),Xe(Fe,Ue,"esm2017"),Xe("fire-js","");const ct="@firebase/installations",ut="0.5.15",lt="w:0.5.15",dt=new re("installations","Installations",{"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."});function ht(e){return e instanceof ie&&e.code.includes("request-failed")}function ft({projectId:e}){return`https://firebaseinstallations.googleapis.com/v1/projects/${e}/installations`}function pt(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}async function gt(e,t){const n=(await t.json()).error;return dt.create("request-failed",{requestName:e,serverCode:n.code,serverMessage:n.message,serverStatus:n.status})}function mt({apiKey:e}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}async function vt(e){const t=await e();return t.status>=500&&t.status<600?e():t}function yt(e){return new Promise((t=>{setTimeout(t,e)}))}const wt=/^[cdef][\w-]{21}$/;function bt(){try{const e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;const t=function(e){return(t=e,btoa(String.fromCharCode(...t)).replace(/\+/g,"-").replace(/\//g,"_")).substr(0,22);var t}(e);return wt.test(t)?t:""}catch(e){return""}}function It(e){return`${e.appName}!${e.appId}`}const Et=new Map;function kt(e,t){const n=It(e);St(n,t),function(e,t){const n=(!Bt&&"BroadcastChannel"in self&&(Bt=new BroadcastChannel("[Firebase] FID Change"),Bt.onmessage=e=>{St(e.data.key,e.data.fid)}),Bt);n&&n.postMessage({key:e,fid:t}),0===Et.size&&Bt&&(Bt.close(),Bt=null)}(n,t)}function St(e,t){const n=Et.get(e);if(n)for(const e of n)e(t)}let Bt=null;const Ct="firebase-installations-store";let Dt=null;function Tt(){return Dt||(Dt=Ne("firebase-installations-database",1,{upgrade:(e,t)=>{0===t&&e.createObjectStore(Ct)}})),Dt}async function _t(e,t){const n=It(e),i=(await Tt()).transaction(Ct,"readwrite"),r=i.objectStore(Ct),a=await r.get(n);return await r.put(t,n),await i.done,a&&a.fid===t.fid||kt(e,t.fid),t}async function Lt(e){const t=It(e),n=(await Tt()).transaction(Ct,"readwrite");await n.objectStore(Ct).delete(t),await n.done}async function At(e,t){const n=It(e),i=(await Tt()).transaction(Ct,"readwrite"),r=i.objectStore(Ct),a=await r.get(n),o=t(a);return void 0===o?await r.delete(n):await r.put(o,n),await i.done,!o||a&&a.fid===o.fid||kt(e,o.fid),o}async function Nt(e){let t;const n=await At(e.appConfig,(n=>{const i=function(e){return Pt(e||{fid:bt(),registrationStatus:0})}(n),r=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine)return{installationEntry:t,registrationPromise:Promise.reject(dt.create("app-offline"))};const n={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},i=async function(e,t){try{const n=await async function({appConfig:e,heartbeatServiceProvider:t},{fid:n}){const i=ft(e),r=mt(e),a=t.getImmediate({optional:!0});if(a){const e=await a.getHeartbeatsHeader();e&&r.append("x-firebase-client",e)}const o={fid:n,authVersion:"FIS_v2",appId:e.appId,sdkVersion:lt},s={method:"POST",headers:r,body:JSON.stringify(o)},c=await vt((()=>fetch(i,s)));if(c.ok){const e=await c.json();return{fid:e.fid||n,registrationStatus:2,refreshToken:e.refreshToken,authToken:pt(e.authToken)}}throw await gt("Create Installation",c)}(e,t);return _t(e.appConfig,n)}catch(n){throw ht(n)&&409===n.customData.serverCode?await Lt(e.appConfig):await _t(e.appConfig,{fid:t.fid,registrationStatus:0}),n}}(e,n);return{installationEntry:n,registrationPromise:i}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:Mt(e)}:{installationEntry:t}}(e,i);return t=r.registrationPromise,r.installationEntry}));return""===n.fid?{installationEntry:await t}:{installationEntry:n,registrationPromise:t}}async function Mt(e){let t=await xt(e.appConfig);for(;1===t.registrationStatus;)await yt(100),t=await xt(e.appConfig);if(0===t.registrationStatus){const{installationEntry:t,registrationPromise:n}=await Nt(e);return n||t}return t}function xt(e){return At(e,(e=>{if(!e)throw dt.create("installation-not-found");return Pt(e)}))}function Pt(e){return 1===(t=e).registrationStatus&&t.registrationTime+1e4<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}async function Rt({appConfig:e,heartbeatServiceProvider:t},n){const i=function(e,{fid:t}){return`${ft(e)}/${t}/authTokens:generate`}(e,n),r=function(e,{refreshToken:t}){const n=mt(e);return n.append("Authorization",function(e){return`FIS_v2 ${e}`}(t)),n}(e,n),a=t.getImmediate({optional:!0});if(a){const e=await a.getHeartbeatsHeader();e&&r.append("x-firebase-client",e)}const o={installation:{sdkVersion:lt,appId:e.appId}},s={method:"POST",headers:r,body:JSON.stringify(o)},c=await vt((()=>fetch(i,s)));if(c.ok)return pt(await c.json());throw await gt("Generate Auth Token",c)}async function Ot(e,t=!1){let n;const i=await At(e.appConfig,(i=>{if(!Ft(i))throw dt.create("not-registered");const r=i.authToken;if(!t&&(2===(a=r).requestStatus&&!function(e){const t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+36e5}(a)))return i;var a;if(1===r.requestStatus)return n=async function(e,t){let n=await jt(e.appConfig);for(;1===n.authToken.requestStatus;)await yt(100),n=await jt(e.appConfig);const i=n.authToken;return 0===i.requestStatus?Ot(e,t):i}(e,t),i;{if(!navigator.onLine)throw dt.create("app-offline");const t=function(e){const t={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},e),{authToken:t})}(i);return n=async function(e,t){try{const n=await Rt(e,t),i=Object.assign(Object.assign({},t),{authToken:n});return await _t(e.appConfig,i),n}catch(n){if(!ht(n)||401!==n.customData.serverCode&&404!==n.customData.serverCode){const n=Object.assign(Object.assign({},t),{authToken:{requestStatus:0}});await _t(e.appConfig,n)}else await Lt(e.appConfig);throw n}}(e,t),t}}));return n?await n:i.authToken}function jt(e){return At(e,(e=>{if(!Ft(e))throw dt.create("not-registered");return 1===(t=e.authToken).requestStatus&&t.requestTime+1e4<Date.now()?Object.assign(Object.assign({},e),{authToken:{requestStatus:0}}):e;var t}))}function Ft(e){return void 0!==e&&2===e.registrationStatus}function Ut(e){return dt.create("missing-app-config-values",{valueName:e})}const $t="installations";Qe(new le($t,(e=>{const t=e.getProvider("app").getImmediate(),n=function(e){if(!e||!e.options)throw Ut("App Configuration");if(!e.name)throw Ut("App Name");const t=["projectId","apiKey","appId"];for(const n of t)if(!e.options[n])throw Ut(n);return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t);return{app:t,appConfig:n,heartbeatServiceProvider:Ge(t,"heartbeat"),_delete:()=>Promise.resolve()}}),"PUBLIC")),Qe(new le("installations-internal",(e=>{const t=Ge(e.getProvider("app").getImmediate(),$t).getImmediate();return{getId:()=>async function(e){const t=e,{installationEntry:n,registrationPromise:i}=await Nt(t);return i?i.catch(console.error):Ot(t).catch(console.error),n.fid}(t),getToken:e=>async function(e,t=!1){const n=e;return await async function(e){const{registrationPromise:t}=await Nt(e);t&&await t}(n),(await Ot(n,t)).token}(t,e)}}),"PRIVATE")),Xe(ct,ut),Xe(ct,ut,"esm2017");const Wt="analytics",Ht="https://www.googletagmanager.com/gtag/js",zt=new be("@firebase/analytics");function qt(e){return Promise.all(e.map((e=>e.catch((e=>e)))))}const Vt=new re("analytics","Analytics",{"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.'}),Qt=new class{constructor(e={},t=1e3){this.throttleMetadata=e,this.intervalMillis=t}getThrottleMetadata(e){return this.throttleMetadata[e]}setThrottleMetadata(e,t){this.throttleMetadata[e]=t}deleteThrottleMetadata(e){delete this.throttleMetadata[e]}};function Gt(e){return new Headers({Accept:"application/json","x-goog-api-key":e})}async function Kt(e,t=Qt,n){const{appId:i,apiKey:r,measurementId:a}=e.options;if(!i)throw Vt.create("no-app-id");if(!r){if(a)return{measurementId:a,appId:i};throw Vt.create("no-api-key")}const o=t.getThrottleMetadata(i)||{backoffCount:0,throttleEndTimeMillis:Date.now()},s=new Yt;return setTimeout((async()=>{s.abort()}),void 0!==n?n:6e4),Jt({appId:i,apiKey:r,measurementId:a},o,s,t)}async function Jt(e,{throttleEndTimeMillis:t,backoffCount:n},i,r=Qt){var a,o;const{appId:s,measurementId:c}=e;try{await function(e,t){return new Promise(((n,i)=>{const r=Math.max(t-Date.now(),0),a=setTimeout(n,r);e.addEventListener((()=>{clearTimeout(a),i(Vt.create("fetch-throttle",{throttleEndTimeMillis:t}))}))}))}(i,t)}catch(e){if(c)return zt.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null===(a=e)||void 0===a?void 0:a.message}]`),{appId:s,measurementId:c};throw e}try{const t=await async function(e){var t;const{appId:n,apiKey:i}=e,r={method:"GET",headers:Gt(i)},a="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig".replace("{app-id}",n),o=await fetch(a,r);if(200!==o.status&&304!==o.status){let e="";try{const n=await o.json();(null===(t=n.error)||void 0===t?void 0:t.message)&&(e=n.error.message)}catch(e){}throw Vt.create("config-fetch-failed",{httpStatus:o.status,responseMessage:e})}return o.json()}(e);return r.deleteThrottleMetadata(s),t}catch(t){const a=t;if(!function(e){if(!(e instanceof ie&&e.customData))return!1;const t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(a)){if(r.deleteThrottleMetadata(s),c)return zt.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null==a?void 0:a.message}]`),{appId:s,measurementId:c};throw t}const u=503===Number(null===(o=null==a?void 0:a.customData)||void 0===o?void 0:o.httpStatus)?ce(n,r.intervalMillis,30):ce(n,r.intervalMillis),l={throttleEndTimeMillis:Date.now()+u,backoffCount:n+1};return r.setThrottleMetadata(s,l),zt.debug(`Calling attemptFetch again in ${u} millis`),Jt(e,l,i,r)}}class Yt{constructor(){this.listeners=[]}addEventListener(e){this.listeners.push(e)}abort(){this.listeners.forEach((e=>e()))}}let Xt,Zt;async function en(e,t,n,i,r,a,o){var s;const c=Kt(e);c.then((t=>{n[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&zt.warn(`The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((e=>zt.error(e))),t.push(c);const u=async function(){var e;if(!Z())return zt.warn(Vt.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await ee()}catch(t){return zt.warn(Vt.create("indexeddb-unavailable",{errorInfo:null===(e=t)||void 0===e?void 0:e.toString()}).message),!1}return!0}().then((e=>e?i.getId():void 0)),[l,d]=await Promise.all([c,u]);(function(e){const t=window.document.getElementsByTagName("script");for(const n of Object.values(t))if(n.src&&n.src.includes(Ht)&&n.src.includes(e))return n;return null})(a)||function(e,t){const n=document.createElement("script");n.src=`${Ht}?l=${e}&id=${t}`,n.async=!0,document.head.appendChild(n)}(a,l.measurementId),Zt&&(r("consent","default",Zt),Zt=void 0),r("js",new Date);const h=null!==(s=null==o?void 0:o.config)&&void 0!==s?s:{};return h.origin="firebase",h.update=!0,null!=d&&(h.firebase_id=d),r("config",l.measurementId,h),Xt&&(r("set",Xt),Xt=void 0),l.measurementId}class tn{constructor(e){this.app=e}_delete(){return delete nn[this.app.options.appId],Promise.resolve()}}let nn={},rn=[];const an={};let on,sn,cn="dataLayer",un=!1;function ln(e,t,n){!function(){const e=[];if(function(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}()&&e.push("This is a browser extension environment."),"undefined"!=typeof navigator&&navigator.cookieEnabled||e.push("Cookies are not available."),e.length>0){const t=e.map(((e,t)=>`(${t+1}) ${e}`)).join(" "),n=Vt.create("invalid-analytics-context",{errorInfo:t});zt.warn(n.message)}}();const i=e.options.appId;if(!i)throw Vt.create("no-app-id");if(!e.options.apiKey){if(!e.options.measurementId)throw Vt.create("no-api-key");zt.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=nn[i])throw Vt.create("already-exists",{id:i});if(!un){!function(e){let t=[];Array.isArray(window.dataLayer)?t=window.dataLayer:window.dataLayer=t}();const{wrappedGtag:e,gtagCore:t}=function(e,t,n,i,r){let a=function(...e){window.dataLayer.push(arguments)};return window.gtag&&"function"==typeof window.gtag&&(a=window.gtag),window.gtag=function(e,t,n,i){return async function(r,a,o){try{"event"===r?await async function(e,t,n,i,r){try{let a=[];if(r&&r.send_to){let e=r.send_to;Array.isArray(e)||(e=[e]);const i=await qt(n);for(const n of e){const e=i.find((e=>e.measurementId===n)),r=e&&t[e.appId];if(!r){a=[];break}a.push(r)}}0===a.length&&(a=Object.values(t)),await Promise.all(a),e("event",i,r||{})}catch(e){zt.error(e)}}(e,t,n,a,o):"config"===r?await async function(e,t,n,i,r,a){const o=i[r];try{if(o)await t[o];else{const e=(await qt(n)).find((e=>e.measurementId===r));e&&await t[e.appId]}}catch(e){zt.error(e)}e("config",r,a)}(e,t,n,i,a,o):"consent"===r?e("consent","update",o):e("set",a)}catch(e){zt.error(e)}}}(a,e,t,n),{gtagCore:a,wrappedGtag:window.gtag}}(nn,rn,an);sn=e,on=t,un=!0}return nn[i]=en(e,rn,an,t,on,cn,n),new tn(e)}function dn(e,t,n,i){e=ue(e),async function(e,t,n,i,r){if(r&&r.global)e("event",n,i);else{const r=await t;e("event",n,Object.assign(Object.assign({},i),{send_to:r}))}}(sn,nn[e.app.options.appId],t,n,i).catch((e=>zt.error(e)))}const hn="@firebase/analytics",fn="0.8.3";var pn,gn,mn,vn,yn,wn,bn,In,En,kn;function Sn(e,t,n){var i=e.answers[t-1],r=null,a=null;"correct"in e&&null!=e.correct&&(r=e.correct==i.answerName),"bucket"in e&&(a=e.bucket);var o="user "+pn+" ansered "+e.qName+" with "+i.answerName;o+=", all answers were [";var s="";for(var c in e.answers)o+=e.answers[c].answerName+",",s+=e.answers[c].answerName+",";o+="] ",o+=r,o+=a,console.log(o),dn(yn,"answered",{type:"answered",clUserId:pn,userSource:gn,lat:mn,lon:vn,city:bn,region:In,country:En,app:kn,dt:n,question_name:e.qName,question:e.promptText,selected_answer:i.answerName,iscorrect:r,options:s,bucket:a})}function Bn(e,t){var n=e.bucketID,i=e.numTried,r=e.numCorrect,a="user "+pn+" finished the bucket "+n;console.log(a),dn(yn,"bucketCompleted",{type:"bucketCompleted",clUserId:pn,userSource:gn,lat:mn,lon:vn,city:bn,region:In,country:En,app:kn,bucketNumber:n,numberTriedInBucket:i,numberCorrectInBucket:r,passedBucket:t})}Qe(new le(Wt,((e,{options:t})=>ln(e.getProvider("app").getImmediate(),e.getProvider("installations-internal").getImmediate(),t)),"PUBLIC")),Qe(new le("analytics-internal",(function(e){try{const t=e.getProvider(Wt).getImmediate();return{logEvent:(e,n,i)=>dn(t,e,n,i)}}catch(e){throw Vt.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),Xe(hn,fn),Xe(hn,fn,"esm2017");class Cn{onEnd(){var e;e="user "+pn+" finished the assessment",console.log(e),dn(yn,"completed",{type:"completed",clUserId:pn,userSource:gn,lat:mn,lon:vn,city:bn,region:In,country:En}),v.style.display="none",y.style.display="none",w.style.display="flex",this.app.unityBridge.SendClose()}}var Dn=function(e,t,n,i){return new(n||(n=Promise))((function(r,a){function o(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((i=i.apply(e,t||[])).next())}))};function Tn(e){return"/data/"+e+".json"}function _n(e){return Dn(this,void 0,void 0,(function*(){var t=Tn(e);return fetch(t).then((e=>e.json()))}))}var Ln;class An extends Cn{constructor(e,t){super(),this.startSurvey=()=>{H(this.getNextQuestion())},this.onQuestionEnd=()=>{q(!1),this.currentQuestionIndex+=1,setTimeout((()=>{this.HasQuestionsLeft()?H(this.getNextQuestion()):(console.log("There are no questions left."),this.onEnd())}),500)},this.TryAnswer=(e,t)=>{Sn(this.questionsData[this.currentQuestionIndex],e,t),q(!0),V(),setTimeout((()=>{this.onQuestionEnd()}),2e3)},this.buildQuestionList=()=>function(e){return Dn(this,void 0,void 0,(function*(){return _n(e).then((e=>e.questions))}))}(this.app.dataURL),console.log("Survey initialized"),this.dataURL=e,this.unityBridge=t,this.currentQuestionIndex=0,G(this.TryAnswer),Q(this.startSurvey)}Run(e){return t=this,n=void 0,h=function*(){this.app=e,this.buildQuestionList().then((e=>{this.questionsData=e,function(e,t){i(this,void 0,void 0,(function*(){var n,i,c="audio/"+(s=t)+"/answer_feedback.mp3";for(var h in r.push(c),u.src=c,e)for(var f in null!=(n=e[h]).promptAudio&&d(n.promptAudio),null!=n.promptImg&&l(n.promptImg),n.answers)null!=(i=n.answers[f]).answerImg&&l(i.answerImg);console.log(a),console.log(o)}))}(this.questionsData,this.app.GetDataURL()),this.unityBridge.SendLoaded()}))},new((c=void 0)||(c=Promise))((function(e,i){function r(e){try{o(h.next(e))}catch(e){i(e)}}function a(e){try{o(h.throw(e))}catch(e){i(e)}}function o(t){var n;t.done?e(t.value):(n=t.value,n instanceof c?n:new c((function(e){e(n)}))).then(r,a)}o((h=h.apply(t,n||[])).next())}));var t,n,c,h}HasQuestionsLeft(){return this.currentQuestionIndex<=this.questionsData.length-1}getNextQuestion(){return this.questionsData[this.currentQuestionIndex]}}function Nn(e,t,n){if(t>n)return null;var i=parseInt((t+n)/2+"");const r={data:e[i],left:null,right:null};return r.left=Nn(e,t,i-1),r.right=Nn(e,i+1,n),r}!function(e){e[e.BinarySearch=0]="BinarySearch",e[e.LinearSearchUp=1]="LinearSearchUp",e[e.LinearSearchDown=2]="LinearSearchDown"}(Ln||(Ln={}));class Mn extends Cn{constructor(e,t){super(),this.startAssessment=()=>{H(this.getNextQuestion())},this.buildBuckets=()=>{var e=function(e){return Dn(this,void 0,void 0,(function*(){return _n(e).then((e=>e.buckets))}))}(this.app.GetDataURL()).then((e=>{this.buckets=e,this.numBuckets=e.length,console.log("buckets: "+this.buckets),this.bucketArray=Array.from(Array(this.numBuckets),((e,t)=>t+1)),console.log("empty array "+this.bucketArray);var t=Nn(this.buckets,0,this.numBuckets);console.log(t),this.basalBucket=this.numBuckets+1,this.ceilingBucket=-1,this.curNode=t,this.tryMoveBucket(t.data,!1)}));return e},this.initBucket=e=>{this.curBucket=e,this.curBucket.usedItems=[],this.curBucket.numTried=0,this.curBucket.numCorrect=0,this.curBucket.numConsecutiveWrong=0,this.curBucket.tested=!0},this.TryAnswer=(e,t)=>{Sn(this.curQ,e,t),this.curBucket.numTried+=1,this.curQ.answers[e-1].answerName==this.curQ.correct?(this.curBucket.numCorrect+=1,this.curBucket.numConsecutiveWrong=0,console.log("answered correctly")):(this.curBucket.numConsecutiveWrong+=1,console.log("answered incorrectly, "+this.curBucket.numConsecutiveWrong)),V(),q(!0),setTimeout((()=>{this.onQuestionEnd()}),2e3)},this.onQuestionEnd=()=>{setTimeout((()=>{q(!1),this.HasQuestionsLeft()?H(this.getNextQuestion()):(console.log("no questions left"),this.onEnd())}),500)},this.getNextQuestion=()=>{var e,t,n,i;do{e=g(this.curBucket.items)}while(this.curBucket.usedItems.includes(e));this.curBucket.usedItems.push(e);do{t=g(this.curBucket.items)}while(e==t);do{n=g(this.curBucket.items)}while(e==n||t==n);do{i=g(this.curBucket.items)}while(e==i||t==i||n==i);var r=[e,t,n,i];m(r);var a={qName:"question"+this.questionNum+"-"+e.itemName,promptText:"",bucket:this.curBucket.bucketID,promptAudio:e.itemName,correct:e.itemText,answers:[{answerName:r[0].itemName,answerText:r[0].itemText},{answerName:r[1].itemName,answerText:r[1].itemText},{answerName:r[2].itemName,answerText:r[2].itemText},{answerName:r[3].itemName,answerText:r[3].itemText}]};return this.curQ=a,this.questionNum+=1,a},this.tryMoveBucket=(e,t)=>{null!=this.curBucket&&Bn(this.curBucket,t),console.log("new  bucket is "+e.bucketID),h(e,this.app.GetDataURL()),this.initBucket(e)},this.HasQuestionsLeft=()=>{var e=!0;return this.curBucket.numCorrect>=4&&(console.log("passed this bucket "+this.curBucket.bucketID),this.curBucket.bucketID>=this.numBuckets?(console.log("passed highest bucket"),Bn(this.curBucket,!0),e=!1):(console.log("moving up bucket"),null!=this.curNode.right?(console.log("moving to right node"),this.curNode=this.curNode.right,this.tryMoveBucket(this.curNode.data,!0)):(console.log("reached root node"),Bn(this.curBucket,!0),e=!1))),(this.curBucket.numConsecutiveWrong>=2||this.curBucket.numTried>=5)&&(console.log("failed this bucket "+this.curBucket.bucketID),this.curBucket.bucketID<this.basalBucket&&(this.basalBucket=this.curBucket.bucketID),this.curBucket.bucketID<=1?(console.log("failed lowest bucket"),e=!1,Bn(this.curBucket,!1)):(console.log("moving down bucket"),null!=this.curNode.left?(console.log("moving to left node"),this.curNode=this.curNode.left,this.tryMoveBucket(this.curNode.data,!1)):(console.log("reached root node"),e=!1,Bn(this.curBucket,!1)))),e},this.dataURL=e,this.unityBridge=t,this.questionNum=0,console.log("app initialized"),G(this.TryAnswer),Q(this.startAssessment)}Run(e){this.app=e,this.buildBuckets().then((e=>{console.log(this.curBucket),this.unityBridge.SendLoaded()}))}}class xn{constructor(){"undefined"!=typeof Unity?this.unityReference=Unity:this.unityReference=null}SendMessage(e){null!==this.unityReference&&this.unityReference.call(e)}SendLoaded(){null!==this.unityReference?this.unityReference.call("loaded"):console.log("would call Unity loaded now")}SendClose(){null!==this.unityReference?this.unityReference.call("close"):console.log("would close Unity now")}}Xe("firebase","9.12.1","app");try{self["workbox:window:7.0.0"]&&_()}catch(Pn){}function Pn(e,t){return new Promise((function(n){var i=new MessageChannel;i.port1.onmessage=function(e){n(e.data)},e.postMessage(t,[i.port2])}))}function Rn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function On(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Rn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Rn(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0;return function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=e[Symbol.iterator]()).next.bind(n)}try{self["workbox:core:7.0.0"]&&_()}catch(Pn){}var jn=function(){var e=this;this.promise=new Promise((function(t,n){e.resolve=t,e.reject=n}))};function Fn(e,t){var n=location.href;return new URL(e,n).href===new URL(t,n).href}var Un=function(e,t){this.type=e,Object.assign(this,t)};function $n(e,t,n){return n?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function Wn(){}var Hn={type:"SKIP_WAITING"};function zn(e,t){if(!t)return e&&e.then?e.then(Wn):Promise.resolve()}var qn=function(e){var t,n;function i(t,n){var i,r;return void 0===n&&(n={}),(i=e.call(this)||this).nn={},i.tn=0,i.rn=new jn,i.en=new jn,i.on=new jn,i.un=0,i.an=new Set,i.cn=function(){var e=i.fn,t=e.installing;i.tn>0||!Fn(t.scriptURL,i.sn.toString())||performance.now()>i.un+6e4?(i.vn=t,e.removeEventListener("updatefound",i.cn)):(i.hn=t,i.an.add(t),i.rn.resolve(t)),++i.tn,t.addEventListener("statechange",i.ln)},i.ln=function(e){var t=i.fn,n=e.target,r=n.state,a=n===i.vn,o={sw:n,isExternal:a,originalEvent:e};!a&&i.mn&&(o.isUpdate=!0),i.dispatchEvent(new Un(r,o)),"installed"===r?i.wn=self.setTimeout((function(){"installed"===r&&t.waiting===n&&i.dispatchEvent(new Un("waiting",o))}),200):"activating"===r&&(clearTimeout(i.wn),a||i.en.resolve(n))},i.dn=function(e){var t=i.hn,n=t!==navigator.serviceWorker.controller;i.dispatchEvent(new Un("controlling",{isExternal:n,originalEvent:e,sw:t,isUpdate:i.mn})),n||i.on.resolve(t)},i.gn=(r=function(e){var t=e.data,n=e.ports,r=e.source;return $n(i.getSW(),(function(){i.an.has(r)&&i.dispatchEvent(new Un("message",{data:t,originalEvent:e,ports:n,sw:r}))}))},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];try{return Promise.resolve(r.apply(this,e))}catch(e){return Promise.reject(e)}}),i.sn=t,i.nn=n,navigator.serviceWorker.addEventListener("message",i.gn),i}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var r,a=i.prototype;return a.register=function(e){var t=(void 0===e?{}:e).immediate,n=void 0!==t&&t;try{var i=this;return function(e,t){var n=e();return n&&n.then?n.then(t):t()}((function(){if(!n&&"complete"!==document.readyState)return zn(new Promise((function(e){return window.addEventListener("load",e)})))}),(function(){return i.mn=Boolean(navigator.serviceWorker.controller),i.yn=i.pn(),$n(i.bn(),(function(e){i.fn=e,i.yn&&(i.hn=i.yn,i.en.resolve(i.yn),i.on.resolve(i.yn),i.yn.addEventListener("statechange",i.ln,{once:!0}));var t=i.fn.waiting;return t&&Fn(t.scriptURL,i.sn.toString())&&(i.hn=t,Promise.resolve().then((function(){i.dispatchEvent(new Un("waiting",{sw:t,wasWaitingBeforeRegister:!0}))})).then((function(){}))),i.hn&&(i.rn.resolve(i.hn),i.an.add(i.hn)),i.fn.addEventListener("updatefound",i.cn),navigator.serviceWorker.addEventListener("controllerchange",i.dn),i.fn}))}))}catch(e){return Promise.reject(e)}},a.update=function(){try{return this.fn?zn(this.fn.update()):void 0}catch(e){return Promise.reject(e)}},a.getSW=function(){return void 0!==this.hn?Promise.resolve(this.hn):this.rn.promise},a.messageSW=function(e){try{return $n(this.getSW(),(function(t){return Pn(t,e)}))}catch(e){return Promise.reject(e)}},a.messageSkipWaiting=function(){this.fn&&this.fn.waiting&&Pn(this.fn.waiting,Hn)},a.pn=function(){var e=navigator.serviceWorker.controller;return e&&Fn(e.scriptURL,this.sn.toString())?e:void 0},a.bn=function(){try{var e=this;return function(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}((function(){return $n(navigator.serviceWorker.register(e.sn,e.nn),(function(t){return e.un=performance.now(),t}))}),(function(e){throw e}))}catch(e){return Promise.reject(e)}},(r=[{key:"active",get:function(){return this.en.promise}},{key:"controlling",get:function(){return this.on.promise}}])&&function(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}(i.prototype,r),i}(function(){function e(){this.Pn=new Map}var t=e.prototype;return t.addEventListener=function(e,t){this.Sn(e).add(t)},t.removeEventListener=function(e,t){this.Sn(e).delete(t)},t.dispatchEvent=function(e){e.target=this;for(var t,n=On(this.Sn(e.type));!(t=n()).done;)(0,t.value)(e)},t.Sn=function(e){return this.Pn.has(e)||this.Pn.set(e,new Set),this.Pn.get(e)},e}());var Vn=function(e,t,n,i){return new(n||(n=Promise))((function(r,a){function o(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((i=i.apply(e,t||[])).next())}))};let Qn=document.getElementById("loadingScreen");const Gn=new BroadcastChannel("as-message-channel");function Kn(e){"Loading"==e.data.msg&&function(e,t){let n=document.getElementById("progressBar");t<100?n.style.width=t+"%":t>=100&&(Qn.style.display="none",O=!0,function(e){if(window.Android){let t=null!==localStorage.getItem(e);window.Android.cachedStatus(t)}}(e.data.data.bookName),localStorage.setItem(e.data.data.bookName,"true"))}(e,parseInt(e.data.data.progress)),"UpdateFound"==e.data.msg&&(console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>.,update Found"),function(){let e="Update Found.\nPlease accept the update by pressing Ok.";1==confirm(e)?window.location.reload():e="Update will happen on the next launch."}())}Gn.addEventListener("message",Kn);const Jn=new class{constructor(){this.lang="english",this.unityBridge=new xn,console.log("Initializing app..."),this.dataURL=t(),this.cacheModel=new class{constructor(e,t,n){this.appName=e,this.contentFilePath=t,this.audioVisualResources=n}setAppName(e){this.appName=e}setContentFilePath(e){this.contentFilePath=e}setAudioVisualResources(e){this.audioVisualResources=e}addItemToAudioVisualResources(e){this.audioVisualResources.has(e)||this.audioVisualResources.add(e)}}(this.dataURL,this.dataURL,new Set);const e=function(e=function(e="[DEFAULT]"){const t=ze.get(e);if(!t&&e===We)return Ye();if(!t)throw Ke.create("no-app",{appName:e});return t}()){const t=Ge(e=ue(e),Wt);return t.isInitialized()?t.getImmediate():function(e,t={}){const n=Ge(e,Wt);if(n.isInitialized()){const e=n.getImmediate();if(oe(t,n.getOptions()))return e;throw Vt.create("already-initialized")}return n.initialize({options:t})}(e)}(Ye({apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:7b1b1181864d28b49de10c",measurementId:"G-FF1159TGCF"}));this.analytics=e,dn(e,"notification_received"),dn(e,"test initialization event",{}),console.log("firebase initialized")}spinUp(){return Vn(this,void 0,void 0,(function*(){window.addEventListener("load",(()=>{console.log("Window Loaded!"),(()=>{Vn(this,void 0,void 0,(function*(){yield this.registerServiceWorker(this.game)}))})()})),yield function(e){return Dn(this,void 0,void 0,(function*(){return _n(e).then((e=>e))}))}(this.dataURL).then((e=>{var t;console.log("Assessment/Survey v0.1.3 initializing!"),console.log("App data loaded!"),console.log(e),this.cacheModel.setContentFilePath(Tn(this.dataURL)),t=e.feedbackText,console.log("feedback text set to "+t),k.innerHTML=t;let i=e.appType;if("survey"==i)this.game=new An(this.dataURL,this.unityBridge);else if("assessment"==i){let t=e.buckets;for(let n=0;n<t.length;n++)for(let i=0;i<t[n].items.length;i++){let r;r=e.quizName.includes("Luganda")?"/audio/"+this.dataURL+"/"+t[n].items[i].itemName.toLowerCase()+".mp3":"/audio/"+this.dataURL+"/"+t[n].items[i].itemName+".mp3",this.cacheModel.addItemToAudioVisualResources(r)}this.cacheModel.addItemToAudioVisualResources("/audio/"+this.dataURL+"/answer_feedback.mp3"),this.game=new Mn(this.dataURL,this.unityBridge)}var r,a,o,s,c;this.game.unityBridge=this.unityBridge,null==(o=n().get("uuid"))&&(console.log("no uuid provided"),o="WebUserNoID"),r=o,a=function(){var e=n().get("userSource");return null==e&&(console.log("no user source provided"),e="WebUserNoSource"),e}(),pn=r,gn=a,s=this.analytics,c=this.dataURL,yn=s,kn=c,function(){console.log("starting to get location"),fetch("https://ipinfo.io/json?token=b6268727178610").then((e=>{if(console.log("got location response"),!e.ok)throw Error(e.statusText);return e.json()})).then((e=>(console.log(e),wn=e.loc,bn=e.city,In=e.region,En=e.country,function(){var e=wn.split(","),t=parseFloat(e[0]).toFixed(2),n=parseFloat(e[1]).toFixed(1);mn=t,vn=n,wn="",e=[];var i="user "+pn+" is at location "+t+","+n;console.log(i),dn(yn,"user_location",{user:pn,app:kn,lat:t,lon:n}),dn(yn,"initialized",{type:"initialized",clUserId:pn,userSource:gn,lat:mn,lon:vn,city:bn,region:In,country:En})}(),{}))).catch((e=>{console.warn(`location failed to update! encountered error ${e.msg}`)}));var e="user "+pn+" opened the assessment";console.log(e),dn(yn,"opened",{})}(),this.game.Run(this)}))}))}registerServiceWorker(e){return Vn(this,void 0,void 0,(function*(){console.log("Registering service worker..."),"serviceWorker"in navigator?(new qn("./sw.js",{}).register().then((e=>{console.log("Service worker registered!"),this.handleServiceWorkerRegistation(e)})).catch((e=>{console.log("Service worker registration failed: "+e)})),yield navigator.serviceWorker.ready,console.log("Cache Model: "),console.log(this.cacheModel),null==localStorage.getItem(this.cacheModel.appName)?(Qn.style.display="flex",Gn.postMessage({command:"Cache",data:{appData:this.cacheModel}})):Qn.style.display="none",Gn.onmessage=e=>{console.log(e.data.command+" received from service worker!"),"Activated"==e.data.command&&Gn.postMessage({command:"Cache",data:{appData:this.cacheModel}})},navigator.serviceWorker.addEventListener("message",Kn)):console.warn("Service workers are not supported in this browser.")}))}handleServiceWorkerRegistation(e){var t;try{null===(t=null==e?void 0:e.installing)||void 0===t||t.postMessage({type:"Registartion",value:this.lang})}catch(e){console.log("Service worker registration failed: "+e)}}GetDataURL(){return this.dataURL}};Jn.spinUp()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,